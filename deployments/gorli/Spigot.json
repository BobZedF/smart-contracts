{
  "address": "0xe147B11bD4143C9D95891C5FA0Be59fbF98A1FEf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadFunction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadSetting",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerAccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRevenue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revenueContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ownerSplit",
          "type": "uint256"
        }
      ],
      "name": "AddSpigot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ClaimEscrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "escrowed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "revenueContract",
          "type": "address"
        }
      ],
      "name": "ClaimRevenue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revenueContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RemoveSpigot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "UpdateOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "UpdateOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revenueContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "split",
          "type": "uint8"
        }
      ],
      "name": "UpdateOwnerSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "UpdateTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "func",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "UpdateWhitelistFunction",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "revenueContract",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "ownerSplit",
              "type": "uint8"
            },
            {
              "internalType": "bytes4",
              "name": "claimFunction",
              "type": "bytes4"
            },
            {
              "internalType": "bytes4",
              "name": "transferOwnerFunction",
              "type": "bytes4"
            }
          ],
          "internalType": "struct ISpigot.Setting",
          "name": "setting",
          "type": "tuple"
        }
      ],
      "name": "addSpigot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "claimEscrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "revenueContract",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "claimRevenue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getEscrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "revenueContract",
          "type": "address"
        }
      ],
      "name": "getSetting",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "revenueContract",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "operate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "revenueContract",
          "type": "address"
        }
      ],
      "name": "removeSpigot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "updateOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "updateOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "revenueContract",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "ownerSplit",
          "type": "uint8"
        }
      ],
      "name": "updateOwnerSplit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "func",
          "type": "bytes4"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "updateWhitelistedFunction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x98662810a933d2351098cea8e7598b86a3113569a12014ac8281b6b395fe7a62",
  "receipt": {
    "to": null,
    "from": "0x41d28426925E8201b2A163C4bC1A45D9EAFb32f4",
    "contractAddress": "0xe147B11bD4143C9D95891C5FA0Be59fbF98A1FEf",
    "transactionIndex": 22,
    "gasUsed": "2942250",
    "logsBloom": "0x
    "blockHash": "0xf5bfa741fe692377417eb67bdff66c690fb2db3c0b447dd9509ad763ac08ad15",
    "transactionHash": "0x98662810a933d2351098cea8e7598b86a3113569a12014ac8281b6b395fe7a62",
    "logs": [],
    "blockNumber": 7381582,
    "cumulativeGasUsed": "27822021",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x41d28426925E8201b2A163C4bC1A45D9EAFb32f4",
    "0x41d28426925E8201b2A163C4bC1A45D9EAFb32f4",
    "0x41d28426925E8201b2A163C4bC1A45D9EAFb32f4"
  ],
  "numDeployments": 1,
  "solcInputHash": "2a60ac237244dc390ce3bdbc44555d3c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadFunction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadSetting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerAccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRevenue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revenueContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerSplit\",\"type\":\"uint256\"}],\"name\":\"AddSpigot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ClaimEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"escrowed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revenueContract\",\"type\":\"address\"}],\"name\":\"ClaimRevenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revenueContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveSpigot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"UpdateOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"UpdateOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revenueContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"split\",\"type\":\"uint8\"}],\"name\":\"UpdateOwnerSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"UpdateTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"func\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"UpdateWhitelistFunction\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revenueContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"ownerSplit\",\"type\":\"uint8\"},{\"internalType\":\"bytes4\",\"name\":\"claimFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"transferOwnerFunction\",\"type\":\"bytes4\"}],\"internalType\":\"struct ISpigot.Setting\",\"name\":\"setting\",\"type\":\"tuple\"}],\"name\":\"addSpigot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimEscrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revenueContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claimRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getEscrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revenueContract\",\"type\":\"address\"}],\"name\":\"getSetting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revenueContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"operate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revenueContract\",\"type\":\"address\"}],\"name\":\"removeSpigot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"updateOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revenueContract\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"ownerSplit\",\"type\":\"uint8\"}],\"name\":\"updateOwnerSplit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"func\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateWhitelistedFunction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kiba Gateaux\",\"details\":\"Should be deployed once per loan. Can attach multiple revenue contracts\",\"kind\":\"dev\",\"methods\":{\"addSpigot(address,(address,uint8,bytes4,bytes4))\":{\"details\":\"- callable by `owner`\",\"params\":{\"revenueContract\":\"- smart contract to claim tokens from\",\"setting\":\"- spigot settings for smart contract   \"}},\"claimEscrow(address)\":{\"details\":\"- callable by `owner`\",\"params\":{\"token\":\"Revenue token that is being escrowed by spigot\"},\"returns\":{\"claimed\":\"-  The amount of tokens claimed from revenue garnish by `owner`\"}},\"claimRevenue(address,bytes)\":{\"details\":\"- callable by anyone\",\"params\":{\"data\":\"Transaction data, including function signature, to properly claim revenue on revenueContract\",\"revenueContract\":\"Contract with registered settings to claim revenue from\"},\"returns\":{\"claimed\":\"-  The amount of tokens claimed from revenueContract and split in payments to `owner` and `treasury`\"}},\"constructor\":{\"details\":\"Configure data for contract owners and initial revenue contracts. Owner/operator/treasury can all be the same address\",\"params\":{\"_operator\":\"Operational account of DAO that actively manages contract health\",\"_owner\":\"Third party that owns rights to contract's revenue stream\",\"_treasury\":\"Treasury of DAO that owns contract and receives leftover revenues\"}},\"getEscrowBalance(address)\":{\"params\":{\"token\":\"Revenue token that is being garnished from spigots\"}},\"operate(address,bytes)\":{\"details\":\"- callable by `operator`\",\"params\":{\"data\":\"- tx data, including function signature, to call contract with\",\"revenueContract\":\"- smart contract to call\"}},\"removeSpigot(address)\":{\"details\":\"- callable by `owner`\",\"params\":{\"revenueContract\":\"- smart contract to transfer ownership of\"}},\"updateOperator(address)\":{\"details\":\"- callable by `operator`\",\"params\":{\"newOperator\":\"- Address to give control to\"}},\"updateOwner(address)\":{\"details\":\"- callable by `owner`\",\"params\":{\"newOwner\":\"- Address to give control to\"}},\"updateTreasury(address)\":{\"details\":\"- callable by `treasury`\",\"params\":{\"newTreasury\":\"- Address to divert funds to\"}},\"updateWhitelistedFunction(bytes4,bool)\":{\"details\":\"- callable by `owner`\",\"params\":{\"allowed\":\"- true/false whether to allow this function to be called by Operator\",\"func\":\"- smart contract function signature to whitelist\"}}},\"title\":\"Spigot\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSpigot(address,(address,uint8,bytes4,bytes4))\":{\"notice\":\"Allow owner to add new revenue stream to spigot\"},\"claimEscrow(address)\":{\"notice\":\"- Allows Spigot Owner to claim escrowed tokens from a revenue contract\"},\"claimRevenue(address,bytes)\":{\"notice\":\"- Claim push/pull payments through Spigots. Calls predefined function in contract settings to claim revenue. Automatically sends portion to treasury and escrows Owner's share.\"},\"getEscrowBalance(address)\":{\"notice\":\"- Retrieve amount of tokens tokens escrowed waiting for claim\"},\"operate(address,bytes)\":{\"notice\":\"- Allows Operator to call whitelisted functions on revenue contracts to maintain their product           while still allowing Spigot Owner to own revenue stream from contract\"},\"removeSpigot(address)\":{\"notice\":\"- Change owner of revenue contract from Spigot (this contract) to Operator.      Sends existing escrow to current Owner.\"},\"updateOperator(address)\":{\"notice\":\"- Update Operator role of Spigot contract.      New Operator can interact with revenue contracts.\"},\"updateOwner(address)\":{\"notice\":\"- Update Owner role of Spigot contract.      New Owner receives revenue stream split and can control Spigot\"},\"updateTreasury(address)\":{\"notice\":\"- Update Treasury role of Spigot contract.      New Treasury receives revenue stream split\"},\"updateWhitelistedFunction(bytes4,bool)\":{\"notice\":\"- Allows Owner to whitelist function methods across all revenue contracts for Operator to call.           Can whitelist \\\"transfer ownership\\\" functions on revenue contracts           allowing Spigot to give direct control back to Operator.\"}},\"notice\":\"Contract allowing Owner to secure revenue streams from a DAO and split payments between them\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/spigot/Spigot.sol\":\"Spigot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/interfaces/ISpigot.sol\":{\"content\":\"interface ISpigot {\\n\\n    struct Setting {\\n        address token;                // token to claim as revenue from contract\\n        uint8 ownerSplit;             // x/100 % to Owner, rest to Treasury\\n        bytes4 claimFunction;         // function signature on contract to call and claim revenue\\n        bytes4 transferOwnerFunction; // function signature on conract to call and transfer ownership \\n    }\\n\\n    // Spigot Events\\n\\n    event AddSpigot(address indexed revenueContract, address token, uint256 ownerSplit);\\n\\n    event RemoveSpigot (address indexed revenueContract, address token);\\n\\n    event UpdateWhitelistFunction(bytes4 indexed func, bool indexed allowed);\\n\\n    event UpdateOwnerSplit(address indexed revenueContract, uint8 indexed split);\\n\\n    event ClaimRevenue(address indexed token, uint256 indexed amount, uint256 escrowed, address revenueContract);\\n\\n    event ClaimEscrow(address indexed token, uint256 indexed amount, address owner);\\n\\n    // Stakeholder Events\\n\\n    event UpdateOwner(address indexed newOwner);\\n\\n    event UpdateOperator(address indexed newOperator);\\n\\n    event UpdateTreasury(address indexed newTreasury);\\n\\n    // Errors \\n    error BadFunction();\\n\\n    error ClaimFailed();\\n\\n    error NoRevenue();\\n\\n    error CallerAccessDenied();\\n    \\n    error BadSetting();\\n\\n\\n    function owner() external view returns (address);\\n    function treasury() external view returns (address);\\n    function operator() external view returns (address);\\n    \\n    function getSetting(address revenueContract) external view returns (address, uint8, bytes4, bytes4);\\n\\n    // ops funcs \\n\\n    function claimRevenue(address revenueContract, bytes calldata data) external returns (uint256 claimed);\\n \\n    function operate(address revenueContract, bytes calldata data) external returns (bool);\\n\\n\\n    // owner funcs \\n    function getEscrowBalance(address token) external view returns (uint256);\\n \\n    function claimEscrow(address token) external returns (uint256 claimed) ;\\n \\n    function addSpigot(address revenueContract, Setting memory setting) external returns (bool);\\n \\n    function removeSpigot(address revenueContract) external returns (bool);\\n        \\n  \\n    // stakeholder funcs \\n\\n    function updateOwnerSplit(address revenueContract, uint8 ownerSplit) external returns(bool);\\n\\n    function updateOwner(address newOwner) external returns (bool);\\n \\n    function updateOperator(address newOperator) external returns (bool);\\n \\n    function updateTreasury(address newTreasury) external returns (bool);\\n \\n    function updateWhitelistedFunction(bytes4 func, bool allowed) external returns (bool);\\n\\n}\\n\",\"keccak256\":\"0xad9ef92af046df412100c03676efb036c2bbe77ff0ccd7df3c0b413a6f040552\"},\"contracts/modules/spigot/Spigot.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {ISpigot} from \\\"../../interfaces/ISpigot.sol\\\";\\n/**\\n * @title Spigot\\n * @author Kiba Gateaux\\n * @notice Contract allowing Owner to secure revenue streams from a DAO and split payments between them\\n * @dev Should be deployed once per loan. Can attach multiple revenue contracts\\n */\\ncontract Spigot is ISpigot, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    // Constants \\n\\n    // Maximum numerator for Setting.ownerSplit param\\n    uint8 constant MAX_SPLIT =  100;\\n    // cap revenue per claim to avoid overflows on multiplication when calculating percentages\\n    uint256 constant MAX_REVENUE = type(uint).max / MAX_SPLIT;\\n\\n    // Stakeholder variables\\n    \\n    address public owner;\\n\\n    address public operator;\\n\\n    address public treasury;\\n\\n    // Spigot variables\\n\\n    // Total amount of tokens escrowed by spigot\\n    mapping(address => uint256) escrowed; // token  -> amount escrowed\\n    //  allowed by operator on all revenue contracts\\n    mapping(bytes4 => bool) whitelistedFunctions; // function -> allowed\\n    // Configurations for revenue contracts to split\\n    mapping(address => Setting) settings; // revenue contract -> settings\\n\\n    /**\\n     *\\n     * @dev Configure data for contract owners and initial revenue contracts.\\n            Owner/operator/treasury can all be the same address\\n     * @param _owner Third party that owns rights to contract's revenue stream\\n     * @param _treasury Treasury of DAO that owns contract and receives leftover revenues\\n     * @param _operator Operational account of DAO that actively manages contract health\\n     *\\n     */\\n    constructor (\\n        address _owner,\\n        address _treasury,\\n        address _operator\\n    ) {\\n        owner = _owner;\\n        operator = _operator;\\n        treasury = _treasury;\\n    }\\n\\n\\n\\n    // ##########################\\n    // #####   Claimoooor   #####\\n    // ##########################\\n\\n    /**\\n\\n     * @notice - Claim push/pull payments through Spigots.\\n                 Calls predefined function in contract settings to claim revenue.\\n                 Automatically sends portion to treasury and escrows Owner's share.\\n     * @dev - callable by anyone\\n     * @param revenueContract Contract with registered settings to claim revenue from\\n     * @param data  Transaction data, including function signature, to properly claim revenue on revenueContract\\n     * @return claimed -  The amount of tokens claimed from revenueContract and split in payments to `owner` and `treasury`\\n    */\\n    function claimRevenue(address revenueContract, bytes calldata data)\\n        external nonReentrant\\n        returns (uint256 claimed)\\n    {\\n        address token = settings[revenueContract].token;\\n        claimed = _claimRevenue(revenueContract, data, token);\\n\\n        // split revenue stream according to settings\\n        uint256 escrowedAmount = claimed * settings[revenueContract].ownerSplit / 100;\\n        // update escrowed balance\\n        escrowed[token] = escrowed[token] + escrowedAmount;\\n        \\n        // send non-escrowed tokens to Treasury if non-zero\\n        if(claimed > escrowedAmount) {\\n            require(_sendOutTokenOrETH(token, treasury, claimed - escrowedAmount));\\n        }\\n\\n        emit ClaimRevenue(token, claimed, escrowedAmount, revenueContract);\\n        \\n        return claimed;\\n    }\\n\\n\\n     function _claimRevenue(address revenueContract, bytes calldata data, address token)\\n        internal\\n        returns (uint256 claimed)\\n    {\\n        uint256 existingBalance = _getBalance(token);\\n        if(settings[revenueContract].claimFunction == bytes4(0)) {\\n            // push payments\\n            // claimed = total balance - already accounted for balance\\n            claimed = existingBalance - escrowed[token];\\n        } else {\\n            // pull payments\\n            if(bytes4(data) != settings[revenueContract].claimFunction) { revert BadFunction(); }\\n            (bool claimSuccess,) = revenueContract.call(data);\\n            if(!claimSuccess) { revert ClaimFailed(); }\\n            // claimed = total balance - existing balance\\n            claimed = _getBalance(token) - existingBalance;\\n        }\\n\\n        if(claimed == 0) { revert NoRevenue(); }\\n\\n        // cap so uint doesnt overflow in split calculations.\\n        // can sweep by \\\"attaching\\\" a push payment spigot with same token\\n        if(claimed > MAX_REVENUE) claimed = MAX_REVENUE;\\n\\n        return claimed;\\n    }\\n\\n    /**\\n     * @notice - Allows Spigot Owner to claim escrowed tokens from a revenue contract\\n     * @dev - callable by `owner`\\n     * @param token Revenue token that is being escrowed by spigot\\n     * @return claimed -  The amount of tokens claimed from revenue garnish by `owner`\\n\\n    */\\n    function claimEscrow(address token) external nonReentrant returns (uint256 claimed)  {\\n        if(msg.sender != owner) { revert CallerAccessDenied(); }\\n\\n\\n        claimed = escrowed[token];\\n\\n        if(claimed == 0) { revert ClaimFailed(); }\\n\\n        require(_sendOutTokenOrETH(token, owner, claimed));\\n\\n        escrowed[token] = 0; // keep 1 in escrow for recurring call gas optimizations?\\n\\n        emit ClaimEscrow(token, claimed, owner);\\n\\n        return claimed;\\n    }\\n\\n    /**\\n     * @notice - Retrieve amount of tokens tokens escrowed waiting for claim\\n     * @param token Revenue token that is being garnished from spigots\\n    */\\n    function getEscrowBalance(address token) external view returns (uint256) {\\n        return escrowed[token];\\n    }\\n\\n\\n\\n    // ##########################\\n    // ##### *ring* *ring*  #####\\n    // #####  OPERATOOOR    #####\\n    // #####  OPERATOOOR    #####\\n    // ##########################\\n\\n    /**\\n     * @notice - Allows Operator to call whitelisted functions on revenue contracts to maintain their product\\n     *           while still allowing Spigot Owner to own revenue stream from contract\\n     * @dev - callable by `operator`\\n     * @param revenueContract - smart contract to call\\n     * @param data - tx data, including function signature, to call contract with\\n     */\\n    function operate(address revenueContract, bytes calldata data) external returns (bool) {\\n        if(msg.sender != operator) { revert CallerAccessDenied(); }\\n        return _operate(revenueContract, data);\\n    }\\n\\n    /**\\n     * @notice - Checks that operation is whitelisted by Spigot Owner and calls revenue contract with supplied data\\n     * @param revenueContract - smart contracts to call\\n     * @param data - tx data, including function signature, to call contracts with\\n     */\\n    function _operate(address revenueContract, bytes calldata data) internal nonReentrant returns (bool) {\\n        // extract function signature from tx data and check whitelist\\n        require(whitelistedFunctions[bytes4(data)], \\\"Spigot: Unauthorized action\\\");\\n        // cant claim revenue via operate() because that fucks up accounting logic. Owner shouldn't whitelist it anyway but just in case\\n        require(settings[revenueContract].claimFunction != bytes4(data), \\\"Spigot: Unauthorized action\\\");\\n\\n        \\n        (bool success,) = revenueContract.call(data);\\n        require(success, \\\"Spigot: Operation failed\\\");\\n\\n        return true;\\n    }\\n\\n\\n\\n    // ##########################\\n    // #####  Maintainooor  #####\\n    // ##########################\\n\\n    /**\\n     * @notice Allow owner to add new revenue stream to spigot\\n     * @dev - callable by `owner`\\n     * @param revenueContract - smart contract to claim tokens from\\n     * @param setting - spigot settings for smart contract   \\n     */\\n    function addSpigot(address revenueContract, Setting memory setting) external returns (bool) {\\n        if(msg.sender != owner) { revert CallerAccessDenied(); }\\n        return _addSpigot(revenueContract, setting);\\n    }\\n\\n    /**\\n     * @notice Checks  revenue contract doesn't already have spigot\\n     *      then registers spigot configuration for revenue contract\\n     * @param revenueContract - smart contract to claim tokens from\\n     * @param setting - spigot configuration for smart contract   \\n     */\\n    function _addSpigot(address revenueContract, Setting memory setting) internal returns (bool) {\\n        require(revenueContract != address(this));\\n        // spigot setting already exists\\n        if(settings[revenueContract].transferOwnerFunction != bytes4(0))  {\\n          revert BadSetting();\\n        }\\n        \\n        // must set transfer func\\n        if(setting.transferOwnerFunction == bytes4(0)) { revert BadSetting(); }\\n        require(setting.ownerSplit <= MAX_SPLIT && setting.ownerSplit >= 0, \\\"Spigot: Invalid split rate\\\");\\n        \\n        settings[revenueContract] = setting;\\n        emit AddSpigot(revenueContract, setting.token, setting.ownerSplit);\\n\\n        return true;\\n    }\\n\\n    /**\\n\\n     * @notice - Change owner of revenue contract from Spigot (this contract) to Operator.\\n     *      Sends existing escrow to current Owner.\\n     * @dev - callable by `owner`\\n     * @param revenueContract - smart contract to transfer ownership of\\n     */\\n    function removeSpigot(address revenueContract) external returns (bool) {\\n        if(msg.sender != owner) { revert CallerAccessDenied(); }\\n        \\n        address token = settings[revenueContract].token;\\n        uint256 claimable = escrowed[token];\\n        if(claimable > 0) {\\n            require(_sendOutTokenOrETH(token, owner, claimable));\\n            emit ClaimEscrow(token, claimable, owner);\\n        }\\n        \\n        (bool success,) = revenueContract.call(\\n            abi.encodeWithSelector(\\n                settings[revenueContract].transferOwnerFunction,\\n                operator    // assume function only takes one param that is new owner address\\n            )\\n        );\\n        require(success);\\n\\n        delete settings[revenueContract];\\n        emit RemoveSpigot(revenueContract, token);\\n\\n        return true;\\n    }\\n\\n    function updateOwnerSplit(address revenueContract, uint8 ownerSplit) external returns(bool) {\\n      if(msg.sender != owner) { revert CallerAccessDenied(); }\\n      require(ownerSplit >= 0 && ownerSplit <= MAX_SPLIT, 'Spigot: invalid owner split');\\n\\n      settings[revenueContract].ownerSplit = ownerSplit;\\n      emit UpdateOwnerSplit(revenueContract, ownerSplit);\\n      \\n      return true;\\n    }\\n    /**\\n\\n     * @notice - Update Owner role of Spigot contract.\\n     *      New Owner receives revenue stream split and can control Spigot\\n     * @dev - callable by `owner`\\n     * @param newOwner - Address to give control to\\n     */\\n    function updateOwner(address newOwner) external returns (bool) {\\n        if(msg.sender != owner) { revert CallerAccessDenied(); }\\n        require(newOwner != address(0));\\n        owner = newOwner;\\n        emit UpdateOwner(newOwner);\\n        return true;\\n    }\\n\\n    /**\\n\\n     * @notice - Update Operator role of Spigot contract.\\n     *      New Operator can interact with revenue contracts.\\n     * @dev - callable by `operator`\\n     * @param newOperator - Address to give control to\\n     */\\n    function updateOperator(address newOperator) external returns (bool) {\\n        if(msg.sender != operator) { revert CallerAccessDenied(); }\\n        require(newOperator != address(0));\\n        operator = newOperator;\\n        emit UpdateOperator(newOperator);\\n        return true;\\n    }\\n    \\n    /**\\n\\n     * @notice - Update Treasury role of Spigot contract.\\n     *      New Treasury receives revenue stream split\\n     * @dev - callable by `treasury`\\n     * @param newTreasury - Address to divert funds to\\n     */\\n    function updateTreasury(address newTreasury) external returns (bool) {\\n        if(msg.sender != operator && msg.sender != treasury) {\\n          revert CallerAccessDenied();\\n        }\\n\\n        require(newTreasury != address(0));\\n        treasury = newTreasury;\\n        emit UpdateTreasury(newTreasury);\\n        return true;\\n    }\\n\\n    /**\\n\\n     * @notice - Allows Owner to whitelist function methods across all revenue contracts for Operator to call.\\n     *           Can whitelist \\\"transfer ownership\\\" functions on revenue contracts\\n     *           allowing Spigot to give direct control back to Operator.\\n     * @dev - callable by `owner`\\n     * @param func - smart contract function signature to whitelist\\n     * @param allowed - true/false whether to allow this function to be called by Operator\\n     */\\n     function updateWhitelistedFunction(bytes4 func, bool allowed) external returns (bool) {\\n        if(msg.sender != owner) { revert CallerAccessDenied(); }\\n        whitelistedFunctions[func] = allowed;\\n        emit UpdateWhitelistFunction(func, allowed);\\n        return true;\\n    }\\n\\n    /**\\n\\n     * @notice - Send ETH or ERC20 token from this contract to an external contract\\n     * @param token - address of token to send out. address(0) for raw ETH\\n     * @param receiver - address to send tokens to\\n     * @param amount - amount of tokens to send\\n     */\\n    function _sendOutTokenOrETH(address token, address receiver, uint256 amount) internal returns (bool) {\\n        if(token!= address(0)) { // ERC20\\n            IERC20(token).safeTransfer(receiver, amount);\\n        } else { // ETH\\n            payable(receiver).transfer(amount);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n\\n     * @notice - Helper function to get current balance of this contract for ERC20 or ETH\\n     * @param token - address of token to check. address(0) for raw ETH\\n     */\\n    function _getBalance(address token) internal view returns (uint256) {\\n        return token != address(0) ?\\n            IERC20(token).balanceOf(address(this)) :\\n            address(this).balance;\\n    }\\n\\n    // GETTERS\\n\\n    function getSetting(address revenueContract)\\n        external view\\n        returns(address, uint8, bytes4, bytes4)\\n    {   \\n        return (\\n            settings[revenueContract].token,\\n            settings[revenueContract].ownerSplit,\\n            settings[revenueContract].claimFunction,\\n            settings[revenueContract].transferOwnerFunction\\n        );\\n    }\\n\\n    receive() external payable {\\n        return;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0bac1467ce2d6247109ce5955652df8b35e301520ffcbb811a0e51f7882af9c4\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200349b3803806200349b833981810160405281019062000037919062000175565b600160008190555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620001d1565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200013d8262000110565b9050919050565b6200014f8162000130565b81146200015b57600080fd5b50565b6000815190506200016f8162000144565b92915050565b6000806000606084860312156200019157620001906200010b565b5b6000620001a1868287016200015e565b9350506020620001b4868287016200015e565b9250506040620001c7868287016200015e565b9150509250925092565b6132ba80620001e16000396000f3fe6080604052600436106100ec5760003560e01c80637f51bb1f1161008a578063b8bf1c0911610059578063b8bf1c0914610361578063c2ae60d81461039e578063d403e9ec146103de578063f9b0631e1461041b576100f3565b80637f51bb1f1461027f578063880cdc31146102bc5780638da5cb5b146102f9578063ac7475ed14610324576100f3565b806353ad370d116100c657806353ad370d146101af578063570ca735146101ec57806361d027b3146102175780636374b11b14610242576100f3565b806308b6eb41146100f857806312879a52146101355780631846f47914610172576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a919061263e565b610458565b60405161012c91906126b7565b60405180910390f35b34801561014157600080fd5b5061015c6004803603810190610157919061270b565b6106c5565b6040516101699190612766565b60405180910390f35b34801561017e57600080fd5b5061019960048036038101906101949190612781565b610854565b6040516101a69190612766565b60405180910390f35b3480156101bb57600080fd5b506101d660048036038101906101d1919061263e565b610c94565b6040516101e39190612766565b60405180910390f35b3480156101f857600080fd5b50610201610d31565b60405161020e91906127bd565b60405180910390f35b34801561022357600080fd5b5061022c610d57565b60405161023991906127bd565b60405180910390f35b34801561024e57600080fd5b5061026960048036038101906102649190612781565b610d7d565b60405161027691906126b7565b60405180910390f35b34801561028b57600080fd5b506102a660048036038101906102a19190612781565b610dc6565b6040516102b39190612766565b60405180910390f35b3480156102c857600080fd5b506102e360048036038101906102de9190612781565b610f72565b6040516102f09190612766565b60405180910390f35b34801561030557600080fd5b5061030e6110c2565b60405161031b91906127bd565b60405180910390f35b34801561033057600080fd5b5061034b60048036038101906103469190612781565b6110e8565b6040516103589190612766565b60405180910390f35b34801561036d57600080fd5b5061038860048036038101906103839190612939565b611238565b6040516103959190612766565b60405180910390f35b3480156103aa57600080fd5b506103c560048036038101906103c09190612781565b6112d3565b6040516103d59493929190612997565b60405180910390f35b3480156103ea57600080fd5b5061040560048036038101906104009190612a08565b61143b565b6040516104129190612766565b60405180910390f35b34801561042757600080fd5b50610442600480360381019061043d9190612781565b611586565b60405161044f91906126b7565b60405180910390f35b6000600260005414156104a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049790612aa5565b60405180910390fd5b60026000819055506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061051b858585846117d3565b915060006064600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff1660ff168461057f9190612af4565b6105899190612b7d565b905080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105d69190612bae565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808311156106635761065982600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683866106549190612c04565b611b0a565b61066257600080fd5b5b828273ffffffffffffffffffffffffffffffffffffffff167fe775ebd008d93b9afec302f34cd39033092430ec8e7eaab7b3104568503a442983896040516106ac929190612c38565b60405180910390a3505060016000819055509392505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074e576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008260ff16101580156107695750606460ff168260ff1611155b6107a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079f90612cad565b60405180910390fd5b81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160146101000a81548160ff021916908360ff1602179055508160ff168373ffffffffffffffffffffffffffffffffffffffff167f49ae9ac7cf9d3148e5e0f43e1c5c4a6ddec8b3a97bafb57c002e1b95e8e46fcd60405160405180910390a36001905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108dd576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115610a39576109be82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611b0a565b6109c757600080fd5b808273ffffffffffffffffffffffffffffffffffffffff167f081bbafdf188a33eeeba9f44cd5f54b98f151cb1058475e8c555bf9fa0020623600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610a3091906127bd565b60405180910390a35b60008473ffffffffffffffffffffffffffffffffffffffff16600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160199054906101000a900460e01b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602401610ad591906127bd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610b3f9190612d47565b6000604051808303816000865af19150503d8060008114610b7c576040519150601f19603f3d011682016040523d82523d6000602084013e610b81565b606091505b5050905080610b8f57600080fd5b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff02191690556000820160156101000a81549063ffffffff02191690556000820160196101000a81549063ffffffff021916905550508473ffffffffffffffffffffffffffffffffffffffff167f708a88df6c6322df6982b1b78b07623652300cf8e98e73998ed28b264aaec60184604051610c8091906127bd565b60405180910390a260019350505050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d1d576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d28848484611bc2565b90509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610e745750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610eab576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ee557600080fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f1f54d231bb9d500b1923e4a1cb25e600f366a8368873d9af7c1c623814df19fc60405160405180910390a260019050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ffb576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561103557600080fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f84022644ce39de434e8f39c4398a3628815893104188274c37205d41c2d5096760405160405180910390a260019050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611171576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111ab57600080fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167fff936929f68b51b2ddfe0c6fcc3e9c817996ae17a98869dd0754af1323f101ee60405160405180910390a260019050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112c1576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112cb8383611e5b565b905092915050565b600080600080600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff16600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160159054906101000a900460e01b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160199054906101000a900460e01b93509350935093509193509193565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114c4576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160056000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550811515837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f8fd1e21416bf15420b9addb683ec815e9f5e9ee45e1555df547df090f540aa6c60405160405180910390a36001905092915050565b6000600260005414156115ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c590612aa5565b60405180910390fd5b6002600081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461165d576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156116da576040517f360e42e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61170782600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611b0a565b61171057600080fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808273ffffffffffffffffffffffffffffffffffffffff167f081bbafdf188a33eeeba9f44cd5f54b98f151cb1058475e8c555bf9fa0020623600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516117be91906127bd565b60405180910390a36001600081905550919050565b6000806117df83612197565b9050600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160159054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156118cc57600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054816118c59190612c04565b9150611a5c565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160159054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168585906119489190612d76565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461199e576040517fb8f3a7b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008673ffffffffffffffffffffffffffffffffffffffff1686866040516119c7929190612e09565b6000604051808303816000865af19150503d8060008114611a04576040519150601f19603f3d011682016040523d82523d6000602084013e611a09565b606091505b5050905080611a44576040517f360e42e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81611a4e85612197565b611a589190612c04565b9250505b6000821415611a97576040517fd55eb96300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606460ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611ac79190612b7d565b821115611b0157606460ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611afe9190612b7d565b91505b50949350505050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611b6f57611b6a83838673ffffffffffffffffffffffffffffffffffffffff166122649092919063ffffffff16565b611bb7565b8273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611bb5573d6000803e3d6000fd5b505b600190509392505050565b600060026000541415611c0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0190612aa5565b60405180910390fd5b600260008190555060056000848490611c239190612d76565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16611cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb390612e6e565b60405180910390fd5b828290611cc99190612d76565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160159054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415611d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8f90612e6e565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff168484604051611dc1929190612e09565b6000604051808303816000865af19150503d8060008114611dfe576040519150601f19603f3d011682016040523d82523d6000602084013e611e03565b606091505b5050905080611e47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3e90612eda565b60405180910390fd5b600191505060016000819055509392505050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e9657600080fd5b600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160199054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611f60576040517fa1fd3ee300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191682606001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415611fe0576040517fa1fd3ee300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606460ff16826020015160ff161115801561200357506000826020015160ff1610155b612042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203990612f46565b60405180910390fd5b81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff16021790555060408201518160000160156101000a81548163ffffffff021916908360e01c021790555060608201518160000160196101000a81548163ffffffff021916908360e01c02179055509050508273ffffffffffffffffffffffffffffffffffffffff167f366c303fa48e82e8094efa1be126cfbd7dc298a323a6b4066942e9503bbd811283600001518460200151604051612185929190612fa1565b60405180910390a26001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121d3574761225d565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161220c91906127bd565b60206040518083038186803b15801561222457600080fd5b505afa158015612238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225c9190612ff6565b5b9050919050565b6122e58363a9059cbb60e01b8484604051602401612283929190613023565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122ea565b505050565b600061234c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166123b19092919063ffffffff16565b90506000815111156123ac578080602001905181019061236c9190613061565b6123ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a290613100565b60405180910390fd5b5b505050565b60606123c084846000856123c9565b90509392505050565b60608247101561240e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240590613192565b60405180910390fd5b612417856124dd565b612456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244d906131fe565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161247f9190612d47565b60006040518083038185875af1925050503d80600081146124bc576040519150601f19603f3d011682016040523d82523d6000602084013e6124c1565b606091505b50915091506124d1828286612500565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561251057829050612560565b6000835111156125235782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125579190613262565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125a68261257b565b9050919050565b6125b68161259b565b81146125c157600080fd5b50565b6000813590506125d3816125ad565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126125fe576125fd6125d9565b5b8235905067ffffffffffffffff81111561261b5761261a6125de565b5b602083019150836001820283011115612637576126366125e3565b5b9250929050565b60008060006040848603121561265757612656612571565b5b6000612665868287016125c4565b935050602084013567ffffffffffffffff81111561268657612685612576565b5b612692868287016125e8565b92509250509250925092565b6000819050919050565b6126b18161269e565b82525050565b60006020820190506126cc60008301846126a8565b92915050565b600060ff82169050919050565b6126e8816126d2565b81146126f357600080fd5b50565b600081359050612705816126df565b92915050565b6000806040838503121561272257612721612571565b5b6000612730858286016125c4565b9250506020612741858286016126f6565b9150509250929050565b60008115159050919050565b6127608161274b565b82525050565b600060208201905061277b6000830184612757565b92915050565b60006020828403121561279757612796612571565b5b60006127a5848285016125c4565b91505092915050565b6127b78161259b565b82525050565b60006020820190506127d260008301846127ae565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612826826127dd565b810181811067ffffffffffffffff82111715612845576128446127ee565b5b80604052505050565b6000612858612567565b9050612864828261281d565b919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61289e81612869565b81146128a957600080fd5b50565b6000813590506128bb81612895565b92915050565b6000608082840312156128d7576128d66127d8565b5b6128e1608061284e565b905060006128f1848285016125c4565b6000830152506020612905848285016126f6565b6020830152506040612919848285016128ac565b604083015250606061292d848285016128ac565b60608301525092915050565b60008060a083850312156129505761294f612571565b5b600061295e858286016125c4565b925050602061296f858286016128c1565b9150509250929050565b612982816126d2565b82525050565b61299181612869565b82525050565b60006080820190506129ac60008301876127ae565b6129b96020830186612979565b6129c66040830185612988565b6129d36060830184612988565b95945050505050565b6129e58161274b565b81146129f057600080fd5b50565b600081359050612a02816129dc565b92915050565b60008060408385031215612a1f57612a1e612571565b5b6000612a2d858286016128ac565b9250506020612a3e858286016129f3565b9150509250929050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612a8f601f83612a48565b9150612a9a82612a59565b602082019050919050565b60006020820190508181036000830152612abe81612a82565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612aff8261269e565b9150612b0a8361269e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b4357612b42612ac5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612b888261269e565b9150612b938361269e565b925082612ba357612ba2612b4e565b5b828204905092915050565b6000612bb98261269e565b9150612bc48361269e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612bf957612bf8612ac5565b5b828201905092915050565b6000612c0f8261269e565b9150612c1a8361269e565b925082821015612c2d57612c2c612ac5565b5b828203905092915050565b6000604082019050612c4d60008301856126a8565b612c5a60208301846127ae565b9392505050565b7f537069676f743a20696e76616c6964206f776e65722073706c69740000000000600082015250565b6000612c97601b83612a48565b9150612ca282612c61565b602082019050919050565b60006020820190508181036000830152612cc681612c8a565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612d01578082015181840152602081019050612ce6565b83811115612d10576000848401525b50505050565b6000612d2182612ccd565b612d2b8185612cd8565b9350612d3b818560208601612ce3565b80840191505092915050565b6000612d538284612d16565b915081905092915050565b600082905092915050565b600082821b905092915050565b6000612d828383612d5e565b82612d8d8135612869565b92506004821015612dcd57612dc87fffffffff0000000000000000000000000000000000000000000000000000000083600403600802612d69565b831692505b505092915050565b82818337600083830152505050565b6000612df08385612cd8565b9350612dfd838584612dd5565b82840190509392505050565b6000612e16828486612de4565b91508190509392505050565b7f537069676f743a20556e617574686f72697a656420616374696f6e0000000000600082015250565b6000612e58601b83612a48565b9150612e6382612e22565b602082019050919050565b60006020820190508181036000830152612e8781612e4b565b9050919050565b7f537069676f743a204f7065726174696f6e206661696c65640000000000000000600082015250565b6000612ec4601883612a48565b9150612ecf82612e8e565b602082019050919050565b60006020820190508181036000830152612ef381612eb7565b9050919050565b7f537069676f743a20496e76616c69642073706c69742072617465000000000000600082015250565b6000612f30601a83612a48565b9150612f3b82612efa565b602082019050919050565b60006020820190508181036000830152612f5f81612f23565b9050919050565b6000819050919050565b6000612f8b612f86612f81846126d2565b612f66565b61269e565b9050919050565b612f9b81612f70565b82525050565b6000604082019050612fb660008301856127ae565b612fc36020830184612f92565b9392505050565b612fd38161269e565b8114612fde57600080fd5b50565b600081519050612ff081612fca565b92915050565b60006020828403121561300c5761300b612571565b5b600061301a84828501612fe1565b91505092915050565b600060408201905061303860008301856127ae565b61304560208301846126a8565b9392505050565b60008151905061305b816129dc565b92915050565b60006020828403121561307757613076612571565b5b60006130858482850161304c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006130ea602a83612a48565b91506130f58261308e565b604082019050919050565b60006020820190508181036000830152613119816130dd565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061317c602683612a48565b915061318782613120565b604082019050919050565b600060208201905081810360008301526131ab8161316f565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006131e8601d83612a48565b91506131f3826131b2565b602082019050919050565b60006020820190508181036000830152613217816131db565b9050919050565b600081519050919050565b60006132348261321e565b61323e8185612a48565b935061324e818560208601612ce3565b613257816127dd565b840191505092915050565b6000602082019050818103600083015261327c8184613229565b90509291505056fea2646970667358221220deeed854bf19bf1a395095ec8c9d6c36169af0ebe83490e7266d7263491edb9964736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c80637f51bb1f1161008a578063b8bf1c0911610059578063b8bf1c0914610361578063c2ae60d81461039e578063d403e9ec146103de578063f9b0631e1461041b576100f3565b80637f51bb1f1461027f578063880cdc31146102bc5780638da5cb5b146102f9578063ac7475ed14610324576100f3565b806353ad370d116100c657806353ad370d146101af578063570ca735146101ec57806361d027b3146102175780636374b11b14610242576100f3565b806308b6eb41146100f857806312879a52146101355780631846f47914610172576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a919061263e565b610458565b60405161012c91906126b7565b60405180910390f35b34801561014157600080fd5b5061015c6004803603810190610157919061270b565b6106c5565b6040516101699190612766565b60405180910390f35b34801561017e57600080fd5b5061019960048036038101906101949190612781565b610854565b6040516101a69190612766565b60405180910390f35b3480156101bb57600080fd5b506101d660048036038101906101d1919061263e565b610c94565b6040516101e39190612766565b60405180910390f35b3480156101f857600080fd5b50610201610d31565b60405161020e91906127bd565b60405180910390f35b34801561022357600080fd5b5061022c610d57565b60405161023991906127bd565b60405180910390f35b34801561024e57600080fd5b5061026960048036038101906102649190612781565b610d7d565b60405161027691906126b7565b60405180910390f35b34801561028b57600080fd5b506102a660048036038101906102a19190612781565b610dc6565b6040516102b39190612766565b60405180910390f35b3480156102c857600080fd5b506102e360048036038101906102de9190612781565b610f72565b6040516102f09190612766565b60405180910390f35b34801561030557600080fd5b5061030e6110c2565b60405161031b91906127bd565b60405180910390f35b34801561033057600080fd5b5061034b60048036038101906103469190612781565b6110e8565b6040516103589190612766565b60405180910390f35b34801561036d57600080fd5b5061038860048036038101906103839190612939565b611238565b6040516103959190612766565b60405180910390f35b3480156103aa57600080fd5b506103c560048036038101906103c09190612781565b6112d3565b6040516103d59493929190612997565b60405180910390f35b3480156103ea57600080fd5b5061040560048036038101906104009190612a08565b61143b565b6040516104129190612766565b60405180910390f35b34801561042757600080fd5b50610442600480360381019061043d9190612781565b611586565b60405161044f91906126b7565b60405180910390f35b6000600260005414156104a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049790612aa5565b60405180910390fd5b60026000819055506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061051b858585846117d3565b915060006064600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff1660ff168461057f9190612af4565b6105899190612b7d565b905080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105d69190612bae565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808311156106635761065982600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683866106549190612c04565b611b0a565b61066257600080fd5b5b828273ffffffffffffffffffffffffffffffffffffffff167fe775ebd008d93b9afec302f34cd39033092430ec8e7eaab7b3104568503a442983896040516106ac929190612c38565b60405180910390a3505060016000819055509392505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074e576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008260ff16101580156107695750606460ff168260ff1611155b6107a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079f90612cad565b60405180910390fd5b81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160146101000a81548160ff021916908360ff1602179055508160ff168373ffffffffffffffffffffffffffffffffffffffff167f49ae9ac7cf9d3148e5e0f43e1c5c4a6ddec8b3a97bafb57c002e1b95e8e46fcd60405160405180910390a36001905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108dd576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115610a39576109be82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611b0a565b6109c757600080fd5b808273ffffffffffffffffffffffffffffffffffffffff167f081bbafdf188a33eeeba9f44cd5f54b98f151cb1058475e8c555bf9fa0020623600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610a3091906127bd565b60405180910390a35b60008473ffffffffffffffffffffffffffffffffffffffff16600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160199054906101000a900460e01b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602401610ad591906127bd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610b3f9190612d47565b6000604051808303816000865af19150503d8060008114610b7c576040519150601f19603f3d011682016040523d82523d6000602084013e610b81565b606091505b5050905080610b8f57600080fd5b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff02191690556000820160156101000a81549063ffffffff02191690556000820160196101000a81549063ffffffff021916905550508473ffffffffffffffffffffffffffffffffffffffff167f708a88df6c6322df6982b1b78b07623652300cf8e98e73998ed28b264aaec60184604051610c8091906127bd565b60405180910390a260019350505050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d1d576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d28848484611bc2565b90509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610e745750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610eab576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ee557600080fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f1f54d231bb9d500b1923e4a1cb25e600f366a8368873d9af7c1c623814df19fc60405160405180910390a260019050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ffb576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561103557600080fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f84022644ce39de434e8f39c4398a3628815893104188274c37205d41c2d5096760405160405180910390a260019050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611171576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111ab57600080fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167fff936929f68b51b2ddfe0c6fcc3e9c817996ae17a98869dd0754af1323f101ee60405160405180910390a260019050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112c1576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112cb8383611e5b565b905092915050565b600080600080600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff16600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160159054906101000a900460e01b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160199054906101000a900460e01b93509350935093509193509193565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114c4576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160056000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550811515837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f8fd1e21416bf15420b9addb683ec815e9f5e9ee45e1555df547df090f540aa6c60405160405180910390a36001905092915050565b6000600260005414156115ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c590612aa5565b60405180910390fd5b6002600081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461165d576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156116da576040517f360e42e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61170782600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611b0a565b61171057600080fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808273ffffffffffffffffffffffffffffffffffffffff167f081bbafdf188a33eeeba9f44cd5f54b98f151cb1058475e8c555bf9fa0020623600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516117be91906127bd565b60405180910390a36001600081905550919050565b6000806117df83612197565b9050600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160159054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156118cc57600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054816118c59190612c04565b9150611a5c565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160159054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168585906119489190612d76565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461199e576040517fb8f3a7b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008673ffffffffffffffffffffffffffffffffffffffff1686866040516119c7929190612e09565b6000604051808303816000865af19150503d8060008114611a04576040519150601f19603f3d011682016040523d82523d6000602084013e611a09565b606091505b5050905080611a44576040517f360e42e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81611a4e85612197565b611a589190612c04565b9250505b6000821415611a97576040517fd55eb96300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606460ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611ac79190612b7d565b821115611b0157606460ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611afe9190612b7d565b91505b50949350505050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611b6f57611b6a83838673ffffffffffffffffffffffffffffffffffffffff166122649092919063ffffffff16565b611bb7565b8273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611bb5573d6000803e3d6000fd5b505b600190509392505050565b600060026000541415611c0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0190612aa5565b60405180910390fd5b600260008190555060056000848490611c239190612d76565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16611cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb390612e6e565b60405180910390fd5b828290611cc99190612d76565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160159054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415611d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8f90612e6e565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff168484604051611dc1929190612e09565b6000604051808303816000865af19150503d8060008114611dfe576040519150601f19603f3d011682016040523d82523d6000602084013e611e03565b606091505b5050905080611e47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3e90612eda565b60405180910390fd5b600191505060016000819055509392505050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e9657600080fd5b600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160199054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611f60576040517fa1fd3ee300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191682606001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415611fe0576040517fa1fd3ee300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606460ff16826020015160ff161115801561200357506000826020015160ff1610155b612042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203990612f46565b60405180910390fd5b81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff16021790555060408201518160000160156101000a81548163ffffffff021916908360e01c021790555060608201518160000160196101000a81548163ffffffff021916908360e01c02179055509050508273ffffffffffffffffffffffffffffffffffffffff167f366c303fa48e82e8094efa1be126cfbd7dc298a323a6b4066942e9503bbd811283600001518460200151604051612185929190612fa1565b60405180910390a26001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121d3574761225d565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161220c91906127bd565b60206040518083038186803b15801561222457600080fd5b505afa158015612238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225c9190612ff6565b5b9050919050565b6122e58363a9059cbb60e01b8484604051602401612283929190613023565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122ea565b505050565b600061234c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166123b19092919063ffffffff16565b90506000815111156123ac578080602001905181019061236c9190613061565b6123ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a290613100565b60405180910390fd5b5b505050565b60606123c084846000856123c9565b90509392505050565b60608247101561240e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240590613192565b60405180910390fd5b612417856124dd565b612456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244d906131fe565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161247f9190612d47565b60006040518083038185875af1925050503d80600081146124bc576040519150601f19603f3d011682016040523d82523d6000602084013e6124c1565b606091505b50915091506124d1828286612500565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561251057829050612560565b6000835111156125235782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125579190613262565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125a68261257b565b9050919050565b6125b68161259b565b81146125c157600080fd5b50565b6000813590506125d3816125ad565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126125fe576125fd6125d9565b5b8235905067ffffffffffffffff81111561261b5761261a6125de565b5b602083019150836001820283011115612637576126366125e3565b5b9250929050565b60008060006040848603121561265757612656612571565b5b6000612665868287016125c4565b935050602084013567ffffffffffffffff81111561268657612685612576565b5b612692868287016125e8565b92509250509250925092565b6000819050919050565b6126b18161269e565b82525050565b60006020820190506126cc60008301846126a8565b92915050565b600060ff82169050919050565b6126e8816126d2565b81146126f357600080fd5b50565b600081359050612705816126df565b92915050565b6000806040838503121561272257612721612571565b5b6000612730858286016125c4565b9250506020612741858286016126f6565b9150509250929050565b60008115159050919050565b6127608161274b565b82525050565b600060208201905061277b6000830184612757565b92915050565b60006020828403121561279757612796612571565b5b60006127a5848285016125c4565b91505092915050565b6127b78161259b565b82525050565b60006020820190506127d260008301846127ae565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612826826127dd565b810181811067ffffffffffffffff82111715612845576128446127ee565b5b80604052505050565b6000612858612567565b9050612864828261281d565b919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61289e81612869565b81146128a957600080fd5b50565b6000813590506128bb81612895565b92915050565b6000608082840312156128d7576128d66127d8565b5b6128e1608061284e565b905060006128f1848285016125c4565b6000830152506020612905848285016126f6565b6020830152506040612919848285016128ac565b604083015250606061292d848285016128ac565b60608301525092915050565b60008060a083850312156129505761294f612571565b5b600061295e858286016125c4565b925050602061296f858286016128c1565b9150509250929050565b612982816126d2565b82525050565b61299181612869565b82525050565b60006080820190506129ac60008301876127ae565b6129b96020830186612979565b6129c66040830185612988565b6129d36060830184612988565b95945050505050565b6129e58161274b565b81146129f057600080fd5b50565b600081359050612a02816129dc565b92915050565b60008060408385031215612a1f57612a1e612571565b5b6000612a2d858286016128ac565b9250506020612a3e858286016129f3565b9150509250929050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612a8f601f83612a48565b9150612a9a82612a59565b602082019050919050565b60006020820190508181036000830152612abe81612a82565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612aff8261269e565b9150612b0a8361269e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b4357612b42612ac5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612b888261269e565b9150612b938361269e565b925082612ba357612ba2612b4e565b5b828204905092915050565b6000612bb98261269e565b9150612bc48361269e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612bf957612bf8612ac5565b5b828201905092915050565b6000612c0f8261269e565b9150612c1a8361269e565b925082821015612c2d57612c2c612ac5565b5b828203905092915050565b6000604082019050612c4d60008301856126a8565b612c5a60208301846127ae565b9392505050565b7f537069676f743a20696e76616c6964206f776e65722073706c69740000000000600082015250565b6000612c97601b83612a48565b9150612ca282612c61565b602082019050919050565b60006020820190508181036000830152612cc681612c8a565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612d01578082015181840152602081019050612ce6565b83811115612d10576000848401525b50505050565b6000612d2182612ccd565b612d2b8185612cd8565b9350612d3b818560208601612ce3565b80840191505092915050565b6000612d538284612d16565b915081905092915050565b600082905092915050565b600082821b905092915050565b6000612d828383612d5e565b82612d8d8135612869565b92506004821015612dcd57612dc87fffffffff0000000000000000000000000000000000000000000000000000000083600403600802612d69565b831692505b505092915050565b82818337600083830152505050565b6000612df08385612cd8565b9350612dfd838584612dd5565b82840190509392505050565b6000612e16828486612de4565b91508190509392505050565b7f537069676f743a20556e617574686f72697a656420616374696f6e0000000000600082015250565b6000612e58601b83612a48565b9150612e6382612e22565b602082019050919050565b60006020820190508181036000830152612e8781612e4b565b9050919050565b7f537069676f743a204f7065726174696f6e206661696c65640000000000000000600082015250565b6000612ec4601883612a48565b9150612ecf82612e8e565b602082019050919050565b60006020820190508181036000830152612ef381612eb7565b9050919050565b7f537069676f743a20496e76616c69642073706c69742072617465000000000000600082015250565b6000612f30601a83612a48565b9150612f3b82612efa565b602082019050919050565b60006020820190508181036000830152612f5f81612f23565b9050919050565b6000819050919050565b6000612f8b612f86612f81846126d2565b612f66565b61269e565b9050919050565b612f9b81612f70565b82525050565b6000604082019050612fb660008301856127ae565b612fc36020830184612f92565b9392505050565b612fd38161269e565b8114612fde57600080fd5b50565b600081519050612ff081612fca565b92915050565b60006020828403121561300c5761300b612571565b5b600061301a84828501612fe1565b91505092915050565b600060408201905061303860008301856127ae565b61304560208301846126a8565b9392505050565b60008151905061305b816129dc565b92915050565b60006020828403121561307757613076612571565b5b60006130858482850161304c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006130ea602a83612a48565b91506130f58261308e565b604082019050919050565b60006020820190508181036000830152613119816130dd565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061317c602683612a48565b915061318782613120565b604082019050919050565b600060208201905081810360008301526131ab8161316f565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006131e8601d83612a48565b91506131f3826131b2565b602082019050919050565b60006020820190508181036000830152613217816131db565b9050919050565b600081519050919050565b60006132348261321e565b61323e8185612a48565b935061324e818560208601612ce3565b613257816127dd565b840191505092915050565b6000602082019050818103600083015261327c8184613229565b90509291505056fea2646970667358221220deeed854bf19bf1a395095ec8c9d6c36169af0ebe83490e7266d7263491edb9964736f6c63430008090033",
  "devdoc": {
    "author": "Kiba Gateaux",
    "details": "Should be deployed once per loan. Can attach multiple revenue contracts",
    "kind": "dev",
    "methods": {
      "addSpigot(address,(address,uint8,bytes4,bytes4))": {
        "details": "- callable by `owner`",
        "params": {
          "revenueContract": "- smart contract to claim tokens from",
          "setting": "- spigot settings for smart contract   "
        }
      },
      "claimEscrow(address)": {
        "details": "- callable by `owner`",
        "params": {
          "token": "Revenue token that is being escrowed by spigot"
        },
        "returns": {
          "claimed": "-  The amount of tokens claimed from revenue garnish by `owner`"
        }
      },
      "claimRevenue(address,bytes)": {
        "details": "- callable by anyone",
        "params": {
          "data": "Transaction data, including function signature, to properly claim revenue on revenueContract",
          "revenueContract": "Contract with registered settings to claim revenue from"
        },
        "returns": {
          "claimed": "-  The amount of tokens claimed from revenueContract and split in payments to `owner` and `treasury`"
        }
      },
      "constructor": {
        "details": "Configure data for contract owners and initial revenue contracts. Owner/operator/treasury can all be the same address",
        "params": {
          "_operator": "Operational account of DAO that actively manages contract health",
          "_owner": "Third party that owns rights to contract's revenue stream",
          "_treasury": "Treasury of DAO that owns contract and receives leftover revenues"
        }
      },
      "getEscrowBalance(address)": {
        "params": {
          "token": "Revenue token that is being garnished from spigots"
        }
      },
      "operate(address,bytes)": {
        "details": "- callable by `operator`",
        "params": {
          "data": "- tx data, including function signature, to call contract with",
          "revenueContract": "- smart contract to call"
        }
      },
      "removeSpigot(address)": {
        "details": "- callable by `owner`",
        "params": {
          "revenueContract": "- smart contract to transfer ownership of"
        }
      },
      "updateOperator(address)": {
        "details": "- callable by `operator`",
        "params": {
          "newOperator": "- Address to give control to"
        }
      },
      "updateOwner(address)": {
        "details": "- callable by `owner`",
        "params": {
          "newOwner": "- Address to give control to"
        }
      },
      "updateTreasury(address)": {
        "details": "- callable by `treasury`",
        "params": {
          "newTreasury": "- Address to divert funds to"
        }
      },
      "updateWhitelistedFunction(bytes4,bool)": {
        "details": "- callable by `owner`",
        "params": {
          "allowed": "- true/false whether to allow this function to be called by Operator",
          "func": "- smart contract function signature to whitelist"
        }
      }
    },
    "title": "Spigot",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addSpigot(address,(address,uint8,bytes4,bytes4))": {
        "notice": "Allow owner to add new revenue stream to spigot"
      },
      "claimEscrow(address)": {
        "notice": "- Allows Spigot Owner to claim escrowed tokens from a revenue contract"
      },
      "claimRevenue(address,bytes)": {
        "notice": "- Claim push/pull payments through Spigots. Calls predefined function in contract settings to claim revenue. Automatically sends portion to treasury and escrows Owner's share."
      },
      "getEscrowBalance(address)": {
        "notice": "- Retrieve amount of tokens tokens escrowed waiting for claim"
      },
      "operate(address,bytes)": {
        "notice": "- Allows Operator to call whitelisted functions on revenue contracts to maintain their product           while still allowing Spigot Owner to own revenue stream from contract"
      },
      "removeSpigot(address)": {
        "notice": "- Change owner of revenue contract from Spigot (this contract) to Operator.      Sends existing escrow to current Owner."
      },
      "updateOperator(address)": {
        "notice": "- Update Operator role of Spigot contract.      New Operator can interact with revenue contracts."
      },
      "updateOwner(address)": {
        "notice": "- Update Owner role of Spigot contract.      New Owner receives revenue stream split and can control Spigot"
      },
      "updateTreasury(address)": {
        "notice": "- Update Treasury role of Spigot contract.      New Treasury receives revenue stream split"
      },
      "updateWhitelistedFunction(bytes4,bool)": {
        "notice": "- Allows Owner to whitelist function methods across all revenue contracts for Operator to call.           Can whitelist \"transfer ownership\" functions on revenue contracts           allowing Spigot to give direct control back to Operator."
      }
    },
    "notice": "Contract allowing Owner to secure revenue streams from a DAO and split payments between them",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 424,
        "contract": "contracts/modules/spigot/Spigot.sol:Spigot",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 11839,
        "contract": "contracts/modules/spigot/Spigot.sol:Spigot",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11841,
        "contract": "contracts/modules/spigot/Spigot.sol:Spigot",
        "label": "operator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11843,
        "contract": "contracts/modules/spigot/Spigot.sol:Spigot",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 11847,
        "contract": "contracts/modules/spigot/Spigot.sol:Spigot",
        "label": "escrowed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11851,
        "contract": "contracts/modules/spigot/Spigot.sol:Spigot",
        "label": "whitelistedFunctions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 11856,
        "contract": "contracts/modules/spigot/Spigot.sol:Spigot",
        "label": "settings",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Setting)2123_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_struct(Setting)2123_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISpigot.Setting)",
        "numberOfBytes": "32",
        "value": "t_struct(Setting)2123_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Setting)2123_storage": {
        "encoding": "inplace",
        "label": "struct ISpigot.Setting",
        "members": [
          {
            "astId": 2116,
            "contract": "contracts/modules/spigot/Spigot.sol:Spigot",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2118,
            "contract": "contracts/modules/spigot/Spigot.sol:Spigot",
            "label": "ownerSplit",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2120,
            "contract": "contracts/modules/spigot/Spigot.sol:Spigot",
            "label": "claimFunction",
            "offset": 21,
            "slot": "0",
            "type": "t_bytes4"
          },
          {
            "astId": 2122,
            "contract": "contracts/modules/spigot/Spigot.sol:Spigot",
            "label": "transferOwnerFunction",
            "offset": 25,
            "slot": "0",
            "type": "t_bytes4"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}