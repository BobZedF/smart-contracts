{
  "address": "0xd8E89577B717F0735E8D03b99f350ad4d44bE4C7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumCollateralRatio",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_loan",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CallerAccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLiquidatable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnderCollateralized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        }
      ],
      "name": "EnableCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveCollateral",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isERC4626",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "assetDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "enableCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loan",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "releaseCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "loan_",
          "type": "address"
        }
      ],
      "name": "updateLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa1486db6bd10b8177a16e8270d260461da6a1787bf181a783ddc2a78f2fb962",
  "receipt": {
    "to": null,
    "from": "0x41d28426925E8201b2A163C4bC1A45D9EAFb32f4",
    "contractAddress": "0xd8E89577B717F0735E8D03b99f350ad4d44bE4C7",
    "transactionIndex": 36,
    "gasUsed": "2219888",
    "logsBloom": "0x
    "blockHash": "0x56f02e8abfe09e702873b3a36a6a5db7f1ee52884ab62de5a21eddca01ed96ac",
    "transactionHash": "0xaa1486db6bd10b8177a16e8270d260461da6a1787bf181a783ddc2a78f2fb962",
    "logs": [],
    "blockNumber": 7381614,
    "cumulativeGasUsed": "6414938",
    "status": 1,
    "byzantium": true
  },
  "args": [
    0,
    "0x7233038E589913DcA4b6D15FF8Bba263A433AED2",
    "0x41d28426925E8201b2A163C4bC1A45D9EAFb32f4",
    "0x41d28426925E8201b2A163C4bC1A45D9EAFb32f4"
  ],
  "numDeployments": 1,
  "solcInputHash": "2a60ac237244dc390ce3bdbc44555d3c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loan\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerAccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnderCollateralized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"EnableCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveCollateral\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isERC4626\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"assetDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"enableCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"releaseCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loan_\",\"type\":\"address\"}],\"name\":\"updateLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addCollateral(uint256,address)\":{\"details\":\"updates cratiorequires that the token deposited can be valued by the escrow's oracle & the depositor has approved this contract- callable by anyone\",\"params\":{\"amount\":\"- the amount of collateral to add\",\"token\":\"- the token address of the deposited token\"},\"returns\":{\"_0\":\"- the updated cratio\"}},\"enableCollateral(address)\":{\"details\":\"- whitelisting protects against malicious 4626 tokens and DoS attacks       - only need to allow once. Can not disable collateral once enabled.\",\"params\":{\"token\":\"- the token to all borrow to deposit as collateral\"}},\"getCollateralRatio()\":{\"details\":\"callable by anyone\",\"returns\":{\"_0\":\"- the calculated cratio\"}},\"getCollateralValue()\":{\"details\":\"callable by anyone\",\"returns\":{\"_0\":\"- the calculated collateral value to 8 decimals\"}},\"liquidate(uint256,address,address)\":{\"details\":\"requires that the cratio is at or below the liquidation thresholdcallable by `loan`\",\"params\":{\"amount\":\"- the amount of tokens to liquidate\",\"to\":\"- the address to receive the funds\",\"token\":\"- the address of the token to draw funds from\"},\"returns\":{\"_0\":\"- true if successful\"}},\"releaseCollateral(uint256,address,address)\":{\"details\":\"callable by `borrower`updates cratio\",\"params\":{\"amount\":\"- the amount of collateral to release\",\"to\":\"- who should receive the funds\",\"token\":\"- the token address to withdraw\"},\"returns\":{\"_0\":\"- the updated cratio\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCollateral(uint256,address)\":{\"notice\":\"add collateral to your position\"},\"enableCollateral(address)\":{\"notice\":\"- allows  the loans arbiter to  enable thdeposits of an asset        - gives  better risk segmentation forlenders\"},\"getCollateralRatio()\":{\"notice\":\"calculates the cratio\"},\"getCollateralValue()\":{\"notice\":\"calculates the collateral value in USD to 8 decimals\"},\"liquidate(uint256,address,address)\":{\"notice\":\"liquidates borrowers collateral by token and amount\"},\"releaseCollateral(uint256,address,address)\":{\"notice\":\"remove collateral from your position. Must remain above min collateral ratio\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/escrow/Escrow.sol\":\"Escrow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrow.sol\":{\"content\":\"pragma solidity 0.8.9;\\ninterface IEscrow {\\n    struct Deposit {\\n        uint amount;\\n        bool isERC4626;\\n        address asset; // eip4626 asset else the erc20 token itself\\n        uint8 assetDecimals;\\n    }\\n\\n    event AddCollateral(address indexed token, uint indexed amount);\\n\\n    event RemoveCollateral(address indexed token, uint indexed amount);\\n\\n    event EnableCollateral(address indexed token, int indexed price);\\n    \\n    event Liquidate(address indexed token, uint indexed amount);\\n\\n    error InvalidCollateral();\\n\\n    error CallerAccessDenied();\\n\\n    error UnderCollateralized();\\n\\n    error NotLiquidatable();\\n\\n    // State Var Getters\\n\\n    function loan() external returns(address);\\n\\n    function borrower() external returns(address);\\n\\n    function minimumCollateralRatio() external returns(uint256);\\n\\n\\n    // Functions \\n\\n    function isLiquidatable() external returns(bool);\\n\\n    function updateLoan(address loan_) external returns(bool);\\n\\n    function getCollateralRatio() external returns(uint);\\n\\n    function getCollateralValue() external returns(uint);\\n\\n    function enableCollateral(address token) external returns(bool);\\n\\n    function addCollateral(uint amount, address token) external returns(uint);\\n\\n    function releaseCollateral(uint amount, address token, address to) external returns(uint);\\n    \\n    function liquidate(uint amount, address token, address to) external returns(bool);\\n}\\n\",\"keccak256\":\"0x9a6f57dec0a5a65a0fc5aa513c4e33fd7fb420f688113b15ef9b33721cfed2e4\"},\"contracts/interfaces/IInterestRateCredit.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\ninterface IInterestRateCredit {\\n  struct Rate {\\n    // interest rate on amount currently being borrower\\n    // in bps, 4 decimals\\n    uint128 drawnRate;\\n    // interest rate on amount deposited by lender but not currently being borrowed\\n    // in bps, 4 decimals\\n    uint128 facilityRate;\\n    // timestamp that interest was last accrued on this position\\n    uint256 lastAccrued;\\n  }\\n\\n  function accrueInterest(\\n    bytes32 positionId,\\n    uint256 drawnAmount,\\n    uint256 facilityAmount\\n  ) external returns(uint256);\\n\\n  function setRate(\\n    bytes32 positionId,\\n    uint128 drawnRate,\\n    uint128 facilityRate\\n  ) external returns(bool);\\n}\\n\",\"keccak256\":\"0x327d41c69ed0b4fe4ff4e74801df7ee1d90ff90cc0b52b737fccd699f6e3fea8\"},\"contracts/interfaces/ILineOfCredit.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\nimport { LoanLib } from \\\"../utils/LoanLib.sol\\\";\\nimport { ILoan } from \\\"./ILoan.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\n\\ninterface ILineOfCredit is ILoan {\\n  // Lender data\\n  struct Credit {\\n    //  all denominated in token, not USD\\n    uint256 deposit;          // total liquidity provided by lender for token\\n    uint256 principal;        // amount actively lent out\\n    uint256 interestAccrued;  // interest accrued but not repaid\\n    uint256 interestRepaid;   // interest repaid by borrower but not withdrawn by lender\\n    uint8 decimals;           // decimals of credit token for calcs\\n    address token;            // token being lent out\\n    address lender;           // person to repay\\n  }\\n\\n  event SetRates(bytes32 indexed id, uint128 indexed drawnRate, uint128 indexed facilityRate);\\n\\n\\n  // Access Errors\\n  error NotActive();\\n  error NotBorrowing();\\n  error CallerAccessDenied();\\n  \\n  // Tokens\\n  error TokenTransferFailed();\\n  error NoTokenPrice();\\n\\n  // Loan\\n  error BadModule(address module);\\n  error NoLiquidity(bytes32 position);\\n  error PositionExists();\\n  error CloseFailedWithPrincipal();\\n\\n  function init() external returns(LoanLib.STATUS);\\n\\n  function addCredit(\\n    uint128 drate,\\n    uint128 frate,\\n    uint256 amount,\\n    address token,\\n    address lender\\n  ) external returns(bytes32);\\n\\n  function setRates(\\n    bytes32 id,\\n    uint128 drate,\\n    uint128 frate\\n  ) external returns(bool);\\n\\n  function increaseCredit(bytes32 id, uint256 amount) external returns(bool);\\n\\n  function borrow(bytes32 id, uint256 amount) external returns(bool);\\n  function depositAndRepay(uint256 amount) external returns(bool);\\n  function depositAndClose() external returns(bool);\\n  function close(bytes32 id) external returns(bool);\\n\\n  function withdraw(bytes32 id, uint256 amount) external returns(bool);\\n\\n  function accrueInterest() external returns(bool);\\n  function updateOutstandingDebt() external returns(uint256, uint256);\\n  function healthcheck() external returns(LoanLib.STATUS);\\n\\n  function borrower() external returns(address);\\n  function arbiter() external returns(address);\\n  function oracle() external returns(IOracle);\\n}\\n\",\"keccak256\":\"0xf69a055a8cfaccd9b612207a0a49e0fdfedf3776e3a6e5a7edf0fb5c6d6cbe60\"},\"contracts/interfaces/ILoan.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\nimport { LoanLib } from \\\"../utils/LoanLib.sol\\\";\\n\\ninterface ILoan {\\n\\n  // General Events\\n  event UpdateLoanStatus(uint256 indexed status); // store as normal uint so it can be indexed in subgraph\\n\\n  event DeployLoan(\\n    address indexed oracle,\\n    address indexed arbiter,\\n    address indexed borrower\\n  );\\n\\n  // Lender Events\\n\\n  event AddCredit(\\n    address indexed lender,\\n    address indexed token,\\n    uint256 indexed deposit,\\n    bytes32 positionId\\n  );\\n\\n\\n   event IncreaseCredit (bytes32 indexed id, uint256 indexed deposit);\\n\\n  // can reference only id once AddCredit is emitted because it will be stored in subgraph\\n  // initialPrinicipal tells us if its a Revolver or Term\\n\\n  event WithdrawDeposit(bytes32 indexed id, uint256 indexed amount);\\n  // lender removing funds from Loan  principal\\n  event WithdrawProfit(bytes32 indexed id, uint256 indexed amount);\\n  // lender taking interest earned out of contract\\n\\n  event CloseCreditPosition(bytes32 indexed id);\\n  // lender officially repaid in full. if Credit then facility has also been closed.\\n\\n  event InterestAccrued(bytes32 indexed id, uint256 indexed amount);\\n  // interest added to borrowers outstanding balance\\n\\n\\n  // Borrower Events\\n\\n  event Borrow(bytes32 indexed id, uint256 indexed amount);\\n  // receive full loan or drawdown on credit\\n\\n  event RepayInterest(bytes32 indexed id, uint256 indexed amount);\\n\\n  event RepayPrincipal(bytes32 indexed id, uint256 indexed amount);\\n\\n  event Default(bytes32 indexed id);\\n}\\n\",\"keccak256\":\"0x63d7f761402d6d221e38e1d8fe3302e1a1f153ea7835f6ac96966f43fa6ee7be\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /** current price for token asset. denominated in USD */\\n    function getLatestAnswer(address token) external returns(int);\\n}\\n\",\"keccak256\":\"0xdefae1f6dd298ddfba2a88c77096e77e59ac0a567bc3c8e76ef5a3424e4b832f\"},\"contracts/modules/escrow/Escrow.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IEscrow} from \\\"../../interfaces/IEscrow.sol\\\";\\nimport {IOracle} from \\\"../../interfaces/IOracle.sol\\\";\\nimport {ILineOfCredit} from \\\"../../interfaces/ILineOfCredit.sol\\\";\\nimport {CreditLib} from \\\"../../utils/CreditLib.sol\\\";\\n\\ncontract Escrow is IEscrow {\\n    using SafeERC20 for IERC20;\\n\\n    // the minimum value of the collateral in relation to the outstanding debt e.g. 10% of outstanding debt\\n    uint256 public minimumCollateralRatio;\\n\\n    // return if have collateral but no debt\\n    uint256 constant MAX_INT =\\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\\n\\n    // Stakeholders and contracts used in Escrow\\n    address public immutable oracle;\\n    address public immutable borrower;\\n    address public loan;\\n\\n    // tracking tokens that were deposited\\n    address[] private _collateralTokens;\\n\\n    // mapping if lenders allow token as collateral. ensures uniqueness in tokensUsedAsCollateral\\n    mapping(address => bool) private enabled;\\n\\n    // tokens used as collateral (must be able to value with oracle)\\n    mapping(address => Deposit) public deposited;\\n\\n    constructor(\\n        uint256 _minimumCollateralRatio,\\n        address _oracle,\\n        address _loan,\\n        address _borrower\\n    ) {\\n        minimumCollateralRatio = _minimumCollateralRatio;\\n        oracle = _oracle;\\n        loan = _loan;\\n        borrower = _borrower;\\n    }\\n\\n    function isLiquidatable() external returns(bool) {\\n      return _getLatestCollateralRatio() < minimumCollateralRatio;\\n    }\\n\\n    function updateLoan(address loan_) external returns(bool) {\\n      require(msg.sender == loan);\\n      loan = loan_;\\n      return true;\\n    }\\n\\n    /**\\n     * @notice updates the cratio according to the collateral value vs loan value\\n     * @dev calls accrue interest on the loan contract to update the latest interest payable\\n     * @return the updated collateral ratio in 18 decimals\\n     */\\n    function _getLatestCollateralRatio() internal returns (uint256) {\\n        (uint256 principal, uint256 interest)  = ILineOfCredit(loan).updateOutstandingDebt();\\n        uint256 debtValue =  principal + interest;\\n        uint256 collateralValue = _getCollateralValue();\\n        if (collateralValue == 0) return 0;\\n        if (debtValue == 0) return MAX_INT;\\n\\n        return _percent(collateralValue, debtValue, 18);\\n    }\\n\\n    /**\\n     * @notice - computes the ratio of one value to another\\n               - e.g. _percent(100, 100, 18) = 1 ether = 100%\\n     * @param numerator - value to compare\\n     * @param denominator - value to compare against\\n     * @param precision - number of decimal places of accuracy to return in answer \\n     * @return quotient -  the result of num / denom\\n    */\\n    function _percent(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 precision\\n    ) internal pure returns (uint256 quotient) {\\n        uint256 _numerator = numerator * 10**(precision + 1);\\n        // with rounding of last digit\\n        uint256 _quotient = ((_numerator / denominator) + 5) / 10;\\n        return (_quotient);\\n    }\\n\\n    /**\\n\\n    * @dev calculate the USD value of all the collateral stored\\n    * @return - the collateral's USD value in 8 decimals\\n    */\\n    function _getCollateralValue() internal returns (uint256) {\\n        uint256 collateralValue = 0;\\n        // gas savings\\n        uint256 length = _collateralTokens.length;\\n        IOracle o = IOracle(oracle); \\n        Deposit memory d;\\n        for (uint256 i = 0; i < length; i++) {\\n            address token = _collateralTokens[i];\\n            d = deposited[token];\\n            uint256 deposit = d.amount;\\n            if (deposit != 0) {\\n                if (d.isERC4626) {\\n                    // this conversion could shift, hence it is best to get it each time\\n                    (bool success, bytes memory assetAmount) = token.call(\\n                        abi.encodeWithSignature(\\n                            \\\"previewRedeem(uint256)\\\",\\n                            deposit\\n                        )\\n                    );\\n                    if (!success) continue;\\n                    deposit = abi.decode(assetAmount, (uint256));\\n                }\\n                collateralValue += CreditLib.getValuation(o, d.asset, deposit, d.assetDecimals);\\n            }\\n        }\\n\\n        return collateralValue;\\n    }\\n\\n    /**\\n     * @notice add collateral to your position\\n     * @dev updates cratio\\n     * @dev requires that the token deposited can be valued by the escrow's oracle & the depositor has approved this contract\\n     * @dev - callable by anyone\\n     * @param amount - the amount of collateral to add\\n     * @param token - the token address of the deposited token\\n     * @return - the updated cratio\\n     */\\n    function addCollateral(uint256 amount, address token)\\n        external\\n        returns (uint256)\\n    {\\n        require(amount > 0);\\n        if(!enabled[token])  { revert InvalidCollateral(); }\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        deposited[token].amount += amount;\\n\\n        emit AddCollateral(token, amount);\\n\\n        return _getLatestCollateralRatio();\\n    }\\n\\n    /**\\n     * @notice - allows  the loans arbiter to  enable thdeposits of an asset\\n     *        - gives  better risk segmentation forlenders\\n     * @dev - whitelisting protects against malicious 4626 tokens and DoS attacks\\n     *       - only need to allow once. Can not disable collateral once enabled.\\n     * @param token - the token to all borrow to deposit as collateral\\n     */\\n    function enableCollateral(address token) external returns (bool) {\\n        require(msg.sender == ILineOfCredit(loan).arbiter());\\n\\n        _enableToken(token);\\n\\n        return true;\\n    }\\n\\n  /**\\n    * @notice track the tokens used as collateral. Ensures uniqueness,\\n              flags if its a EIP 4626 token, and gets its decimals\\n    * @dev - if 4626 token then Deposit.asset s the underlying asset, not the 4626 token\\n    * return bool - if collateral is now enabled or not.\\n    */\\n    function _enableToken(address token) internal returns(bool) {\\n        bool isEnabled = enabled[token];\\n        if (!isEnabled) {\\n            Deposit memory deposit = deposited[token]; // gas savings\\n\\n            (bool passed, bytes memory tokenAddrBytes) = token.call(\\n                abi.encodeWithSignature(\\\"asset()\\\")\\n            );\\n\\n            bool is4626 = tokenAddrBytes.length > 0 && passed;\\n            deposit.isERC4626 = is4626;\\n            // if 4626 save the underlying token to use for oracle pricing\\n            deposit.asset = !is4626 ? token : abi.decode(tokenAddrBytes, (address));\\n\\n            int price = IOracle(oracle).getLatestAnswer(deposit.asset);\\n            if(price <= 0) { revert InvalidCollateral(); }\\n\\n            (bool successDecimals, bytes memory decimalBytes) = deposit\\n                .asset\\n                .call(abi.encodeWithSignature(\\\"decimals()\\\"));\\n            if (decimalBytes.length > 0 && successDecimals) {\\n                deposit.assetDecimals = abi.decode(decimalBytes, (uint8));\\n            } else {\\n                deposit.assetDecimals = 18;\\n            }\\n\\n            // update collateral settings\\n            enabled[token] = true;\\n            deposited[token] = deposit;\\n            _collateralTokens.push(token);\\n            emit EnableCollateral(deposit.asset, price);\\n            return true;\\n        }\\n\\n        return isEnabled;\\n    }\\n\\n    /**\\n     * @notice remove collateral from your position. Must remain above min collateral ratio\\n     * @dev callable by `borrower`\\n     * @dev updates cratio\\n     * @param amount - the amount of collateral to release\\n     * @param token - the token address to withdraw\\n     * @param to - who should receive the funds\\n     * @return - the updated cratio\\n     */\\n    function releaseCollateral(\\n        uint256 amount,\\n        address token,\\n        address to\\n    ) external returns (uint256) {\\n        require(amount > 0);\\n        if(msg.sender != borrower) { revert CallerAccessDenied(); }\\n        if(deposited[token].amount < amount) { revert InvalidCollateral(); }\\n        deposited[token].amount -= amount;\\n        IERC20(token).safeTransfer(to, amount);\\n        uint256 cratio = _getLatestCollateralRatio();\\n        if(cratio < minimumCollateralRatio) { revert UnderCollateralized(); }\\n        \\n        emit RemoveCollateral(token, amount);\\n\\n        return cratio;\\n    }\\n\\n    /**\\n     * @notice calculates the cratio\\n     * @dev callable by anyone\\n     * @return - the calculated cratio\\n     */\\n    function getCollateralRatio() external returns (uint256) {\\n        return _getLatestCollateralRatio();\\n    }\\n\\n    /**\\n     * @notice calculates the collateral value in USD to 8 decimals\\n     * @dev callable by anyone\\n     * @return - the calculated collateral value to 8 decimals\\n     */\\n    function getCollateralValue() external returns (uint256) {\\n        return _getCollateralValue();\\n    }\\n\\n    /**\\n     * @notice liquidates borrowers collateral by token and amount\\n     * @dev requires that the cratio is at or below the liquidation threshold\\n     * @dev callable by `loan`\\n     * @param amount - the amount of tokens to liquidate\\n     * @param token - the address of the token to draw funds from\\n     * @param to - the address to receive the funds\\n     * @return - true if successful\\n     */\\n    function liquidate(\\n        uint256 amount,\\n        address token,\\n        address to\\n    ) external returns (bool) {\\n        require(amount > 0);\\n        if(msg.sender != loan) { revert CallerAccessDenied(); }\\n        if(deposited[token].amount < amount) { revert InvalidCollateral(); }\\n        if(minimumCollateralRatio < _getLatestCollateralRatio()) { revert NotLiquidatable(); }\\n\\n        deposited[token].amount -= amount;\\n        \\n        IERC20(token).safeTransfer(to, amount);\\n\\n        emit Liquidate(token, amount);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xf5e8985971341e3e151202e63051f7ba7811c70f7b30fb9572bea4ae38953ea6\"},\"contracts/utils/CreditLib.sol\":{\"content\":\"pragma solidity 0.8.9;\\nimport { ILineOfCredit } from \\\"../interfaces/ILineOfCredit.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { IInterestRateCredit } from \\\"../interfaces/IInterestRateCredit.sol\\\";\\nimport { ILoan } from \\\"../interfaces/ILoan.sol\\\";\\nimport { LoanLib } from \\\"./LoanLib.sol\\\";\\n\\n/**\\n  * @title Debt DAO P2P Loan Library\\n  * @author Kiba Gateaux\\n  * @notice Core logic and variables to be reused across all Debt DAO Marketplace loans\\n */\\nlibrary CreditLib {\\n\\n    event AddCredit(\\n        address indexed lender,\\n        address indexed token,\\n        uint256 indexed deposit,\\n        bytes32 positionId\\n    );\\n\\n  event WithdrawDeposit(bytes32 indexed id, uint256 indexed amount);\\n  // lender removing funds from Loan  principal\\n  event WithdrawProfit(bytes32 indexed id, uint256 indexed amount);\\n  // lender taking interest earned out of contract\\n\\n  event InterestAccrued(bytes32 indexed id, uint256 indexed amount);\\n  // interest added to borrowers outstanding balance\\n\\n\\n  // Borrower Events\\n\\n  event Borrow(bytes32 indexed id, uint256 indexed amount);\\n  // receive full loan or drawdown on credit\\n\\n  event RepayInterest(bytes32 indexed id, uint256 indexed amount);\\n\\n  event RepayPrincipal(bytes32 indexed id, uint256 indexed amount);\\n\\n\\n  error NoTokenPrice();\\n\\n  error PositionExists();\\n\\n\\n  /**\\n   * @dev          - Create deterministic hash id for a debt position on `loan` given position details\\n   * @param loan   - loan that debt position exists on\\n   * @param lender - address managing debt position\\n   * @param token  - token that is being lent out in debt position\\n   * @return positionId\\n   */\\n  function computePositionId(\\n    address loan,\\n    address lender,\\n    address token\\n  )\\n    external pure\\n    returns(bytes32)\\n  {\\n    return _computePositionId(loan, lender, token);\\n  }\\n\\n  function _computePositionId(\\n    address loan,\\n    address lender,\\n    address token\\n  )\\n    internal pure\\n    returns(bytes32)\\n  {\\n    return keccak256(abi.encode(loan, lender, token));\\n  }\\n\\n\\n    function getOutstandingDebt(\\n      ILineOfCredit.Credit memory credit,\\n      bytes32 id,\\n      address oracle,\\n      address interestRate\\n    )\\n      external\\n      returns (ILineOfCredit.Credit memory c, uint256 principal, uint256 interest)\\n    {\\n        c = _accrue(credit, id, IInterestRateCredit(interestRate)); // Issue is accruing interest from here\\n\\n        int256 price = IOracle(oracle).getLatestAnswer(c.token);\\n\\n        principal += _calculateValue(\\n            price,\\n            c.principal,\\n            c.decimals\\n        );\\n        interest += _calculateValue(\\n            price,\\n            c.interestAccrued,\\n            c.decimals\\n        );\\n\\n        return (c, principal, interest);\\n  }\\n\\n   /**\\n     * @notice         - Gets total valuation for amount of tokens using given oracle. \\n     * @dev            - Assumes oracles all return answers in USD with 1e8 decimals\\n                       - Does not check if price < 0. HAndled in Oracle or Loan\\n     * @param oracle   - oracle contract specified by loan getting valuation\\n     * @param token    - token to value on oracle\\n     * @param amount   - token amount\\n     * @param decimals - token decimals\\n     * @return         - total value in usd of all tokens \\n     */\\n    function getValuation(\\n      IOracle oracle,\\n      address token,\\n      uint256 amount,\\n      uint8 decimals\\n    )\\n      external\\n      returns(uint256)\\n    {\\n      return _calculateValue(oracle.getLatestAnswer(token), amount, decimals);\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev            - Assumes oracles all return answers in USD with 1e8 decimals\\n                       - Does not check if price < 0. HAndled in Oracle or Loan\\n     * @param price    - oracle price of asset. 8 decimals\\n     * @param amount   - amount of tokens vbeing valued.\\n     * @param decimals - token decimals to remove for usd price\\n     * @return         - total USD value of amount in 8 decimals \\n     */\\n    function calculateValue(\\n      int price,\\n      uint256 amount,\\n      uint8 decimals\\n    )\\n      external pure\\n      returns(uint256)\\n    {\\n      return _calculateValue(price, amount, decimals);\\n    }\\n\\n\\n      /**\\n     * @notice         - calculates value of tokens and denominates in USD 8\\n     * @dev            - Assumes all oracles return USD responses in 1e8 decimals\\n     * @param price    - oracle price of asset. 8 decimals\\n     * @param amount   - amount of tokens vbeing valued.\\n     * @param decimals - token decimals to remove for usd price\\n     * @return         - total value in usd of all tokens \\n     */\\n    function _calculateValue(\\n      int price,\\n      uint256 amount,\\n      uint8 decimals\\n    )\\n      internal pure\\n      returns(uint256)\\n    {\\n      return price <= 0 ? 0 : (amount * uint(price)) / (1 * 10 ** decimals);\\n    }\\n\\n  \\n\\n  function create(\\n      bytes32 id,\\n      uint256 amount,\\n      address lender,\\n      address token,\\n      address oracle\\n  )\\n      external \\n      returns(ILineOfCredit.Credit memory credit)\\n  {\\n      return _create(id, amount, lender, token, oracle);\\n  }\\n\\n  function _create(\\n      bytes32 id,\\n      uint256 amount,\\n      address lender,\\n      address token,\\n      address oracle\\n  )\\n      internal \\n      returns(ILineOfCredit.Credit memory credit)\\n  {\\n      int price = IOracle(oracle).getLatestAnswer(token);\\n      if(price <= 0 ) { revert NoTokenPrice(); }\\n\\n      (bool passed, bytes memory result) = token.call(\\n          abi.encodeWithSignature(\\\"decimals()\\\")\\n      );\\n      uint8 decimals = !passed ? 18 : abi.decode(result, (uint8));\\n\\n      credit = ILineOfCredit.Credit({\\n          lender: lender,\\n          token: token,\\n          decimals: decimals,\\n          deposit: amount,\\n          principal: 0,\\n          interestAccrued: 0,\\n          interestRepaid: 0\\n      });\\n\\n      emit AddCredit(lender, token, amount, id);\\n\\n      return credit;\\n  }\\n\\n  function repay(\\n    ILineOfCredit.Credit memory credit,\\n    bytes32 id,\\n    uint256 amount\\n  )\\n    external\\n    // TODO don't need to return all uints if we can get events working in library to show up on subgraph\\n    returns (ILineOfCredit.Credit memory)\\n  { unchecked {\\n      if (amount <= credit.interestAccrued) {\\n          credit.interestAccrued -= amount;\\n          credit.interestRepaid += amount;\\n          emit RepayInterest(id, amount);\\n          return credit;\\n      } else {\\n          uint256 interest = credit.interestAccrued;\\n          uint256 principalPayment = amount - interest;\\n\\n          // update individual credit position denominated in token\\n          credit.principal -= principalPayment;\\n          credit.interestRepaid += interest;\\n          credit.interestAccrued = 0;\\n\\n          emit RepayInterest(id, interest);\\n          emit RepayPrincipal(id, principalPayment);\\n\\n          return credit;\\n      }\\n  } }\\n\\n  function withdraw(\\n    ILineOfCredit.Credit memory credit,\\n    bytes32 id,\\n    uint256 amount\\n  )\\n    external\\n    returns (ILineOfCredit.Credit memory)\\n  { unchecked {\\n      if(amount > credit.deposit - credit.principal + credit.interestRepaid) {\\n        revert ILineOfCredit.NoLiquidity(id);\\n      }\\n\\n      if (amount > credit.interestRepaid) {\\n          uint256 interest = credit.interestRepaid;\\n          amount -= interest;\\n\\n          credit.deposit -= amount;\\n          credit.interestRepaid = 0;\\n\\n          // emit events before seeting to 0\\n          emit WithdrawDeposit(id, amount);\\n          emit WithdrawProfit(id, interest);\\n\\n          return credit;\\n      } else {\\n          credit.interestRepaid -= amount;\\n          emit WithdrawProfit(id, amount);\\n          return credit;\\n      }\\n  } }\\n\\n\\n  function accrue(\\n    ILineOfCredit.Credit memory credit,\\n    bytes32 id,\\n    address interest\\n  )\\n    external\\n    returns (ILineOfCredit.Credit memory)\\n  { \\n    return _accrue(credit, id, IInterestRateCredit(interest));\\n  }\\n\\n  function _accrue(\\n    ILineOfCredit.Credit memory credit,\\n    bytes32 id,\\n    IInterestRateCredit interest\\n  )\\n    internal\\n    returns (ILineOfCredit.Credit memory)\\n  { unchecked {\\n      // interest will almost always be less than deposit\\n      // low risk of overflow unless extremely high interest rate\\n\\n      // get token demoninated interest accrued\\n      uint256 accruedToken = interest.accrueInterest(\\n          id,\\n          credit.principal,\\n          credit.deposit\\n      );\\n\\n      // update credits balance\\n      credit.interestAccrued += accruedToken;\\n\\n      emit InterestAccrued(id, accruedToken);\\n      return credit;\\n  } }\\n}\\n\",\"keccak256\":\"0xc4d0601e61130fd6a37a31a915f49eeab62cbc0f5605bc463d57a20f09194a5b\"},\"contracts/utils/LoanLib.sol\":{\"content\":\"pragma solidity 0.8.9;\\nimport { ILoan } from \\\"../interfaces/ILoan.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\n/**\\n  * @title Debt DAO P2P Loan Library\\n  * @author Kiba Gateaux\\n  * @notice Core logic and variables to be reused across all Debt DAO Marketplace loans\\n */\\nlibrary LoanLib {\\n    event UpdateLoanStatus(uint256 indexed status); // store as normal uint so it can be indexed in subgraph\\n\\n    enum STATUS {\\n        // \\u00bfhoo dis\\n        // Loan has been deployed but terms and conditions are still being signed off by parties\\n        UNINITIALIZED,\\n        INITIALIZED,\\n\\n        // ITS ALLLIIIIVVEEE\\n        // Loan is operational and actively monitoring status\\n        ACTIVE,\\n        UNDERCOLLATERALIZED,\\n        LIQUIDATABLE, // [#X\\n        DELINQUENT,\\n\\n        // Loan is in distress and paused\\n        LIQUIDATING,\\n        OVERDRAWN,\\n        DEFAULT,\\n        ARBITRATION,\\n\\n        // L\\u00f6n izz ded\\n        // Loan is no longer active, successfully repaid or insolvent\\n        REPAID,\\n        INSOLVENT\\n    }\\n\\n    function updateStatus(STATUS status, STATUS target) external returns(STATUS) {\\n        if (status == target) return status;  // check if it needs updating\\n        status = target;            // set storage in Line contract\\n        emit UpdateLoanStatus(uint256(status));\\n        return status;\\n    }\\n}\\n\",\"keccak256\":\"0xf245bd57fcc50793a607c24d652535b99a7bff5e39e77ef7a8c9d7743d3100ef\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620028fd380380620028fd833981810160405281019062000037919062000196565b836000819055508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050505062000208565b600080fd5b6000819050919050565b6200010b81620000f6565b81146200011757600080fd5b50565b6000815190506200012b8162000100565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200015e8262000131565b9050919050565b620001708162000151565b81146200017c57600080fd5b50565b600081519050620001908162000165565b92915050565b60008060008060808587031215620001b357620001b2620000f1565b5b6000620001c3878288016200011a565b9450506020620001d6878288016200017f565b9350506040620001e9878288016200017f565b9250506060620001fc878288016200017f565b91505092959194509250565b60805160a0516126ba62000243600039600081816105ee015261084001526000818161081c01528181610f7f01526113b601526126ba6000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639f1837ce1161008c578063cadac47911610066578063cadac4791461022a578063cb13cddb1461025a578063cd377c531461028d578063d285b7b4146102ab576100cf565b80639f1837ce146101be578063c047e563146101dc578063caa0a6f0146101fa576100cf565b8063060336ec146100d457806311be0de514610104578063250bc38414610134578063578c65e4146101645780637dc0d1d0146101825780637df1f1b9146101a0575b600080fd5b6100ee60048036038101906100e99190611b52565b6102c9565b6040516100fb9190611bc0565b60405180910390f35b61011e60048036038101906101199190611bdb565b6104f0565b60405161012b9190611bc0565b60405180910390f35b61014e60048036038101906101499190611b52565b6105de565b60405161015b9190611c17565b60405180910390f35b61016c610808565b6040516101799190611bc0565b60405180910390f35b61018a61081a565b6040516101979190611c41565b60405180910390f35b6101a861083e565b6040516101b59190611c41565b60405180910390f35b6101c6610862565b6040516101d39190611c17565b60405180910390f35b6101e4610868565b6040516101f19190611c17565b60405180910390f35b610214600480360381019061020f9190611bdb565b610877565b6040516102219190611bc0565b60405180910390f35b610244600480360381019061023f9190611c5c565b61091d565b6040516102519190611c17565b60405180910390f35b610274600480360381019061026f9190611bdb565b610a88565b6040516102849493929190611cb8565b60405180910390f35b610295610af2565b6040516102a29190611c17565b60405180910390f35b6102b3610b01565b6040516102c09190611c41565b60405180910390f35b60008084116102d757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035e576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410156103da576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103e2610b27565b600054101561041d576040517fddeb79ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461046f9190611d2c565b925050819055506104a182858573ffffffffffffffffffffffffffffffffffffffff16610c4e9092919063ffffffff16565b838373ffffffffffffffffffffffffffffffffffffffff167f08813a3631e12129135cc9440d3fea50eec346f1673b20b994b0456d5d46ccb960405160405180910390a3600190509392505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe25e00a6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561055c57600080fd5b505af1158015610570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105949190611d75565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105cb57600080fd5b6105d482610cd4565b5060019050919050565b60008084116105ec57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610671576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410156106ed576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461073f9190611d2c565b9250508190555061077182858573ffffffffffffffffffffffffffffffffffffffff16610c4e9092919063ffffffff16565b600061077b610b27565b90506000548110156107b9576040517f30b58a9100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b848473ffffffffffffffffffffffffffffffffffffffff167fe25410a4059619c9594dc6f022fe231b02aaea733f689e7ab0cd21b3d4d0eb5460405160405180910390a3809150509392505050565b60008054610814610b27565b10905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005481565b60006108726113a1565b905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108d357600080fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b600080831161092b57600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109ae576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109db3330858573ffffffffffffffffffffffffffffffffffffffff16611713909392919063ffffffff16565b82600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610a2d9190611da2565b92505081905550828273ffffffffffffffffffffffffffffffffffffffff167f2ac90482c3b6bea30a2c085cf093016bad7f970d91c5fd233e6b848d3e231dc360405160405180910390a3610a80610b27565b905092915050565b60046020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160159054906101000a900460ff16905084565b6000610afc610b27565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663501b56d86040518163ffffffff1660e01b81526004016040805180830381600087803b158015610b9557600080fd5b505af1158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd9190611e0d565b9150915060008183610bdf9190611da2565b90506000610beb6113a1565b90506000811415610c03576000945050505050610c4b565b6000821415610c38577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff945050505050610c4b565b610c448183601261179c565b9450505050505b90565b610ccf8363a9059cbb60e01b8484604051602401610c6d929190611e4d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506117f9565b505050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905080611397576000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160159054906101000a900460ff1660ff1660ff168152505090506000808573ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f38d52e0f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610ebb9190611ef0565b6000604051808303816000865af19150503d8060008114610ef8576040519150601f19603f3d011682016040523d82523d6000602084013e610efd565b606091505b50915091506000808251118015610f115750825b9050808460200190151590811515815250508015610f425781806020019051810190610f3d9190611f45565b610f44565b865b846040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636849a3ba86604001516040518263ffffffff1660e01b8152600401610fda9190611c41565b602060405180830381600087803b158015610ff457600080fd5b505af1158015611008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102c9190611fa8565b905060008113611068576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080866040015173ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516111169190611ef0565b6000604051808303816000865af19150503d8060008114611153576040519150601f19603f3d011682016040523d82523d6000602084013e611158565b606091505b50915091506000815111801561116b5750815b1561119a57808060200190518101906111849190612001565b876060019060ff16908160ff16815250506111ae565b6012876060019060ff16908160ff16815250505b6001600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555086600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160010160156101000a81548160ff021916908360ff16021790555090505060028a9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082876040015173ffffffffffffffffffffffffffffffffffffffff167f292b47225ec7a0c7e1bae48dbb6ce8ddd9f7479e5398721b82de816f7282498560405160405180910390a360019850505050505050505061139c565b809150505b919050565b600080600090506000600280549050905060007f000000000000000000000000000000000000000000000000000000000000000090506113df611a76565b60005b8381101561170857600060028281548110611400576113ff61202e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160159054906101000a900460ff1660ff1660ff16815250509250600083600001519050600081146116f25783602001511561164f576000808373ffffffffffffffffffffffffffffffffffffffff16836040516024016115579190611c17565b6040516020818303038152906040527f4cdad506000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516115e19190611ef0565b6000604051808303816000865af19150503d806000811461161e576040519150601f19603f3d011682016040523d82523d6000602084013e611623565b606091505b50915091508161163657505050506116f5565b8080602001905181019061164a919061205d565b925050505b73D0a68b3894704A17056FE6Cc64Fb314a528813A463cae8b7128686604001518488606001516040518563ffffffff1660e01b81526004016116949493929190612116565b60206040518083038186803b1580156116ac57600080fd5b505af41580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e4919061205d565b876116ef9190611da2565b96505b50505b80806117009061215b565b9150506113e2565b508394505050505090565b611796846323b872dd60e01b858585604051602401611734939291906121a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506117f9565b50505050565b6000806001836117ac9190611da2565b600a6117b8919061230e565b856117c39190612359565b90506000600a600586846117d791906123e2565b6117e19190611da2565b6117eb91906123e2565b905080925050509392505050565b600061185b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118c09092919063ffffffff16565b90506000815111156118bb578080602001905181019061187b919061243f565b6118ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b1906124ef565b60405180910390fd5b5b505050565b60606118cf84846000856118d8565b90509392505050565b60608247101561191d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191490612581565b60405180910390fd5b611926856119ec565b611965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195c906125ed565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161198e9190611ef0565b60006040518083038185875af1925050503d80600081146119cb576040519150601f19603f3d011682016040523d82523d6000602084013e6119d0565b606091505b50915091506119e0828286611a0f565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611a1f57829050611a6f565b600083511115611a325782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a669190612662565b60405180910390fd5b9392505050565b604051806080016040528060008152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681525090565b600080fd5b6000819050919050565b611ad181611abe565b8114611adc57600080fd5b50565b600081359050611aee81611ac8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b1f82611af4565b9050919050565b611b2f81611b14565b8114611b3a57600080fd5b50565b600081359050611b4c81611b26565b92915050565b600080600060608486031215611b6b57611b6a611ab9565b5b6000611b7986828701611adf565b9350506020611b8a86828701611b3d565b9250506040611b9b86828701611b3d565b9150509250925092565b60008115159050919050565b611bba81611ba5565b82525050565b6000602082019050611bd56000830184611bb1565b92915050565b600060208284031215611bf157611bf0611ab9565b5b6000611bff84828501611b3d565b91505092915050565b611c1181611abe565b82525050565b6000602082019050611c2c6000830184611c08565b92915050565b611c3b81611b14565b82525050565b6000602082019050611c566000830184611c32565b92915050565b60008060408385031215611c7357611c72611ab9565b5b6000611c8185828601611adf565b9250506020611c9285828601611b3d565b9150509250929050565b600060ff82169050919050565b611cb281611c9c565b82525050565b6000608082019050611ccd6000830187611c08565b611cda6020830186611bb1565b611ce76040830185611c32565b611cf46060830184611ca9565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d3782611abe565b9150611d4283611abe565b925082821015611d5557611d54611cfd565b5b828203905092915050565b600081519050611d6f81611b26565b92915050565b600060208284031215611d8b57611d8a611ab9565b5b6000611d9984828501611d60565b91505092915050565b6000611dad82611abe565b9150611db883611abe565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ded57611dec611cfd565b5b828201905092915050565b600081519050611e0781611ac8565b92915050565b60008060408385031215611e2457611e23611ab9565b5b6000611e3285828601611df8565b9250506020611e4385828601611df8565b9150509250929050565b6000604082019050611e626000830185611c32565b611e6f6020830184611c08565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015611eaa578082015181840152602081019050611e8f565b83811115611eb9576000848401525b50505050565b6000611eca82611e76565b611ed48185611e81565b9350611ee4818560208601611e8c565b80840191505092915050565b6000611efc8284611ebf565b915081905092915050565b6000611f1282611af4565b9050919050565b611f2281611f07565b8114611f2d57600080fd5b50565b600081519050611f3f81611f19565b92915050565b600060208284031215611f5b57611f5a611ab9565b5b6000611f6984828501611f30565b91505092915050565b6000819050919050565b611f8581611f72565b8114611f9057600080fd5b50565b600081519050611fa281611f7c565b92915050565b600060208284031215611fbe57611fbd611ab9565b5b6000611fcc84828501611f93565b91505092915050565b611fde81611c9c565b8114611fe957600080fd5b50565b600081519050611ffb81611fd5565b92915050565b60006020828403121561201757612016611ab9565b5b600061202584828501611fec565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561207357612072611ab9565b5b600061208184828501611df8565b91505092915050565b6000819050919050565b60006120af6120aa6120a584611af4565b61208a565b611af4565b9050919050565b60006120c182612094565b9050919050565b60006120d3826120b6565b9050919050565b6120e3816120c8565b82525050565b6120f281611b14565b82525050565b61210181611abe565b82525050565b61211081611c9c565b82525050565b600060808201905061212b60008301876120da565b61213860208301866120e9565b61214560408301856120f8565b6121526060830184612107565b95945050505050565b600061216682611abe565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561219957612198611cfd565b5b600182019050919050565b60006060820190506121b96000830186611c32565b6121c66020830185611c32565b6121d36040830184611c08565b949350505050565b60008160011c9050919050565b6000808291508390505b60018511156122325780860481111561220e5761220d611cfd565b5b600185161561221d5780820291505b808102905061222b856121db565b94506121f2565b94509492505050565b60008261224b5760019050612307565b816122595760009050612307565b816001811461226f5760028114612279576122a8565b6001915050612307565b60ff84111561228b5761228a611cfd565b5b8360020a9150848211156122a2576122a1611cfd565b5b50612307565b5060208310610133831016604e8410600b84101617156122dd5782820a9050838111156122d8576122d7611cfd565b5b612307565b6122ea84848460016121e8565b9250905081840481111561230157612300611cfd565b5b81810290505b9392505050565b600061231982611abe565b915061232483611abe565b92506123517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461223b565b905092915050565b600061236482611abe565b915061236f83611abe565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156123a8576123a7611cfd565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006123ed82611abe565b91506123f883611abe565b925082612408576124076123b3565b5b828204905092915050565b61241c81611ba5565b811461242757600080fd5b50565b60008151905061243981612413565b92915050565b60006020828403121561245557612454611ab9565b5b60006124638482850161242a565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006124d9602a8361246c565b91506124e48261247d565b604082019050919050565b60006020820190508181036000830152612508816124cc565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061256b60268361246c565b91506125768261250f565b604082019050919050565b6000602082019050818103600083015261259a8161255e565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006125d7601d8361246c565b91506125e2826125a1565b602082019050919050565b60006020820190508181036000830152612606816125ca565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006126348261260d565b61263e818561246c565b935061264e818560208601611e8c565b61265781612618565b840191505092915050565b6000602082019050818103600083015261267c8184612629565b90509291505056fea2646970667358221220fae1a611072b3cfee24c454df3693e8567c102001243605f2e593c4e8ad8778864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639f1837ce1161008c578063cadac47911610066578063cadac4791461022a578063cb13cddb1461025a578063cd377c531461028d578063d285b7b4146102ab576100cf565b80639f1837ce146101be578063c047e563146101dc578063caa0a6f0146101fa576100cf565b8063060336ec146100d457806311be0de514610104578063250bc38414610134578063578c65e4146101645780637dc0d1d0146101825780637df1f1b9146101a0575b600080fd5b6100ee60048036038101906100e99190611b52565b6102c9565b6040516100fb9190611bc0565b60405180910390f35b61011e60048036038101906101199190611bdb565b6104f0565b60405161012b9190611bc0565b60405180910390f35b61014e60048036038101906101499190611b52565b6105de565b60405161015b9190611c17565b60405180910390f35b61016c610808565b6040516101799190611bc0565b60405180910390f35b61018a61081a565b6040516101979190611c41565b60405180910390f35b6101a861083e565b6040516101b59190611c41565b60405180910390f35b6101c6610862565b6040516101d39190611c17565b60405180910390f35b6101e4610868565b6040516101f19190611c17565b60405180910390f35b610214600480360381019061020f9190611bdb565b610877565b6040516102219190611bc0565b60405180910390f35b610244600480360381019061023f9190611c5c565b61091d565b6040516102519190611c17565b60405180910390f35b610274600480360381019061026f9190611bdb565b610a88565b6040516102849493929190611cb8565b60405180910390f35b610295610af2565b6040516102a29190611c17565b60405180910390f35b6102b3610b01565b6040516102c09190611c41565b60405180910390f35b60008084116102d757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035e576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410156103da576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103e2610b27565b600054101561041d576040517fddeb79ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461046f9190611d2c565b925050819055506104a182858573ffffffffffffffffffffffffffffffffffffffff16610c4e9092919063ffffffff16565b838373ffffffffffffffffffffffffffffffffffffffff167f08813a3631e12129135cc9440d3fea50eec346f1673b20b994b0456d5d46ccb960405160405180910390a3600190509392505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe25e00a6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561055c57600080fd5b505af1158015610570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105949190611d75565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105cb57600080fd5b6105d482610cd4565b5060019050919050565b60008084116105ec57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610671576040517f1172e7cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410156106ed576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461073f9190611d2c565b9250508190555061077182858573ffffffffffffffffffffffffffffffffffffffff16610c4e9092919063ffffffff16565b600061077b610b27565b90506000548110156107b9576040517f30b58a9100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b848473ffffffffffffffffffffffffffffffffffffffff167fe25410a4059619c9594dc6f022fe231b02aaea733f689e7ab0cd21b3d4d0eb5460405160405180910390a3809150509392505050565b60008054610814610b27565b10905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005481565b60006108726113a1565b905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108d357600080fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b600080831161092b57600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109ae576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109db3330858573ffffffffffffffffffffffffffffffffffffffff16611713909392919063ffffffff16565b82600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610a2d9190611da2565b92505081905550828273ffffffffffffffffffffffffffffffffffffffff167f2ac90482c3b6bea30a2c085cf093016bad7f970d91c5fd233e6b848d3e231dc360405160405180910390a3610a80610b27565b905092915050565b60046020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160159054906101000a900460ff16905084565b6000610afc610b27565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663501b56d86040518163ffffffff1660e01b81526004016040805180830381600087803b158015610b9557600080fd5b505af1158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd9190611e0d565b9150915060008183610bdf9190611da2565b90506000610beb6113a1565b90506000811415610c03576000945050505050610c4b565b6000821415610c38577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff945050505050610c4b565b610c448183601261179c565b9450505050505b90565b610ccf8363a9059cbb60e01b8484604051602401610c6d929190611e4d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506117f9565b505050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905080611397576000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160159054906101000a900460ff1660ff1660ff168152505090506000808573ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f38d52e0f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610ebb9190611ef0565b6000604051808303816000865af19150503d8060008114610ef8576040519150601f19603f3d011682016040523d82523d6000602084013e610efd565b606091505b50915091506000808251118015610f115750825b9050808460200190151590811515815250508015610f425781806020019051810190610f3d9190611f45565b610f44565b865b846040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636849a3ba86604001516040518263ffffffff1660e01b8152600401610fda9190611c41565b602060405180830381600087803b158015610ff457600080fd5b505af1158015611008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102c9190611fa8565b905060008113611068576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080866040015173ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516111169190611ef0565b6000604051808303816000865af19150503d8060008114611153576040519150601f19603f3d011682016040523d82523d6000602084013e611158565b606091505b50915091506000815111801561116b5750815b1561119a57808060200190518101906111849190612001565b876060019060ff16908160ff16815250506111ae565b6012876060019060ff16908160ff16815250505b6001600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555086600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160010160156101000a81548160ff021916908360ff16021790555090505060028a9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082876040015173ffffffffffffffffffffffffffffffffffffffff167f292b47225ec7a0c7e1bae48dbb6ce8ddd9f7479e5398721b82de816f7282498560405160405180910390a360019850505050505050505061139c565b809150505b919050565b600080600090506000600280549050905060007f000000000000000000000000000000000000000000000000000000000000000090506113df611a76565b60005b8381101561170857600060028281548110611400576113ff61202e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160159054906101000a900460ff1660ff1660ff16815250509250600083600001519050600081146116f25783602001511561164f576000808373ffffffffffffffffffffffffffffffffffffffff16836040516024016115579190611c17565b6040516020818303038152906040527f4cdad506000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516115e19190611ef0565b6000604051808303816000865af19150503d806000811461161e576040519150601f19603f3d011682016040523d82523d6000602084013e611623565b606091505b50915091508161163657505050506116f5565b8080602001905181019061164a919061205d565b925050505b73__$bc5de6d277e12fd1c4c455d259e7f498b2$__63cae8b7128686604001518488606001516040518563ffffffff1660e01b81526004016116949493929190612116565b60206040518083038186803b1580156116ac57600080fd5b505af41580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e4919061205d565b876116ef9190611da2565b96505b50505b80806117009061215b565b9150506113e2565b508394505050505090565b611796846323b872dd60e01b858585604051602401611734939291906121a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506117f9565b50505050565b6000806001836117ac9190611da2565b600a6117b8919061230e565b856117c39190612359565b90506000600a600586846117d791906123e2565b6117e19190611da2565b6117eb91906123e2565b905080925050509392505050565b600061185b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118c09092919063ffffffff16565b90506000815111156118bb578080602001905181019061187b919061243f565b6118ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b1906124ef565b60405180910390fd5b5b505050565b60606118cf84846000856118d8565b90509392505050565b60608247101561191d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191490612581565b60405180910390fd5b611926856119ec565b611965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195c906125ed565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161198e9190611ef0565b60006040518083038185875af1925050503d80600081146119cb576040519150601f19603f3d011682016040523d82523d6000602084013e6119d0565b606091505b50915091506119e0828286611a0f565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611a1f57829050611a6f565b600083511115611a325782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a669190612662565b60405180910390fd5b9392505050565b604051806080016040528060008152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681525090565b600080fd5b6000819050919050565b611ad181611abe565b8114611adc57600080fd5b50565b600081359050611aee81611ac8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b1f82611af4565b9050919050565b611b2f81611b14565b8114611b3a57600080fd5b50565b600081359050611b4c81611b26565b92915050565b600080600060608486031215611b6b57611b6a611ab9565b5b6000611b7986828701611adf565b9350506020611b8a86828701611b3d565b9250506040611b9b86828701611b3d565b9150509250925092565b60008115159050919050565b611bba81611ba5565b82525050565b6000602082019050611bd56000830184611bb1565b92915050565b600060208284031215611bf157611bf0611ab9565b5b6000611bff84828501611b3d565b91505092915050565b611c1181611abe565b82525050565b6000602082019050611c2c6000830184611c08565b92915050565b611c3b81611b14565b82525050565b6000602082019050611c566000830184611c32565b92915050565b60008060408385031215611c7357611c72611ab9565b5b6000611c8185828601611adf565b9250506020611c9285828601611b3d565b9150509250929050565b600060ff82169050919050565b611cb281611c9c565b82525050565b6000608082019050611ccd6000830187611c08565b611cda6020830186611bb1565b611ce76040830185611c32565b611cf46060830184611ca9565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d3782611abe565b9150611d4283611abe565b925082821015611d5557611d54611cfd565b5b828203905092915050565b600081519050611d6f81611b26565b92915050565b600060208284031215611d8b57611d8a611ab9565b5b6000611d9984828501611d60565b91505092915050565b6000611dad82611abe565b9150611db883611abe565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ded57611dec611cfd565b5b828201905092915050565b600081519050611e0781611ac8565b92915050565b60008060408385031215611e2457611e23611ab9565b5b6000611e3285828601611df8565b9250506020611e4385828601611df8565b9150509250929050565b6000604082019050611e626000830185611c32565b611e6f6020830184611c08565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015611eaa578082015181840152602081019050611e8f565b83811115611eb9576000848401525b50505050565b6000611eca82611e76565b611ed48185611e81565b9350611ee4818560208601611e8c565b80840191505092915050565b6000611efc8284611ebf565b915081905092915050565b6000611f1282611af4565b9050919050565b611f2281611f07565b8114611f2d57600080fd5b50565b600081519050611f3f81611f19565b92915050565b600060208284031215611f5b57611f5a611ab9565b5b6000611f6984828501611f30565b91505092915050565b6000819050919050565b611f8581611f72565b8114611f9057600080fd5b50565b600081519050611fa281611f7c565b92915050565b600060208284031215611fbe57611fbd611ab9565b5b6000611fcc84828501611f93565b91505092915050565b611fde81611c9c565b8114611fe957600080fd5b50565b600081519050611ffb81611fd5565b92915050565b60006020828403121561201757612016611ab9565b5b600061202584828501611fec565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561207357612072611ab9565b5b600061208184828501611df8565b91505092915050565b6000819050919050565b60006120af6120aa6120a584611af4565b61208a565b611af4565b9050919050565b60006120c182612094565b9050919050565b60006120d3826120b6565b9050919050565b6120e3816120c8565b82525050565b6120f281611b14565b82525050565b61210181611abe565b82525050565b61211081611c9c565b82525050565b600060808201905061212b60008301876120da565b61213860208301866120e9565b61214560408301856120f8565b6121526060830184612107565b95945050505050565b600061216682611abe565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561219957612198611cfd565b5b600182019050919050565b60006060820190506121b96000830186611c32565b6121c66020830185611c32565b6121d36040830184611c08565b949350505050565b60008160011c9050919050565b6000808291508390505b60018511156122325780860481111561220e5761220d611cfd565b5b600185161561221d5780820291505b808102905061222b856121db565b94506121f2565b94509492505050565b60008261224b5760019050612307565b816122595760009050612307565b816001811461226f5760028114612279576122a8565b6001915050612307565b60ff84111561228b5761228a611cfd565b5b8360020a9150848211156122a2576122a1611cfd565b5b50612307565b5060208310610133831016604e8410600b84101617156122dd5782820a9050838111156122d8576122d7611cfd565b5b612307565b6122ea84848460016121e8565b9250905081840481111561230157612300611cfd565b5b81810290505b9392505050565b600061231982611abe565b915061232483611abe565b92506123517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461223b565b905092915050565b600061236482611abe565b915061236f83611abe565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156123a8576123a7611cfd565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006123ed82611abe565b91506123f883611abe565b925082612408576124076123b3565b5b828204905092915050565b61241c81611ba5565b811461242757600080fd5b50565b60008151905061243981612413565b92915050565b60006020828403121561245557612454611ab9565b5b60006124638482850161242a565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006124d9602a8361246c565b91506124e48261247d565b604082019050919050565b60006020820190508181036000830152612508816124cc565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061256b60268361246c565b91506125768261250f565b604082019050919050565b6000602082019050818103600083015261259a8161255e565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006125d7601d8361246c565b91506125e2826125a1565b602082019050919050565b60006020820190508181036000830152612606816125ca565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006126348261260d565b61263e818561246c565b935061264e818560208601611e8c565b61265781612618565b840191505092915050565b6000602082019050818103600083015261267c8184612629565b90509291505056fea2646970667358221220fae1a611072b3cfee24c454df3693e8567c102001243605f2e593c4e8ad8778864736f6c63430008090033",
  "libraries": {
    "CreditLib": "0xD0a68b3894704A17056FE6Cc64Fb314a528813A4"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addCollateral(uint256,address)": {
        "details": "updates cratiorequires that the token deposited can be valued by the escrow's oracle & the depositor has approved this contract- callable by anyone",
        "params": {
          "amount": "- the amount of collateral to add",
          "token": "- the token address of the deposited token"
        },
        "returns": {
          "_0": "- the updated cratio"
        }
      },
      "enableCollateral(address)": {
        "details": "- whitelisting protects against malicious 4626 tokens and DoS attacks       - only need to allow once. Can not disable collateral once enabled.",
        "params": {
          "token": "- the token to all borrow to deposit as collateral"
        }
      },
      "getCollateralRatio()": {
        "details": "callable by anyone",
        "returns": {
          "_0": "- the calculated cratio"
        }
      },
      "getCollateralValue()": {
        "details": "callable by anyone",
        "returns": {
          "_0": "- the calculated collateral value to 8 decimals"
        }
      },
      "liquidate(uint256,address,address)": {
        "details": "requires that the cratio is at or below the liquidation thresholdcallable by `loan`",
        "params": {
          "amount": "- the amount of tokens to liquidate",
          "to": "- the address to receive the funds",
          "token": "- the address of the token to draw funds from"
        },
        "returns": {
          "_0": "- true if successful"
        }
      },
      "releaseCollateral(uint256,address,address)": {
        "details": "callable by `borrower`updates cratio",
        "params": {
          "amount": "- the amount of collateral to release",
          "to": "- who should receive the funds",
          "token": "- the token address to withdraw"
        },
        "returns": {
          "_0": "- the updated cratio"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCollateral(uint256,address)": {
        "notice": "add collateral to your position"
      },
      "enableCollateral(address)": {
        "notice": "- allows  the loans arbiter to  enable thdeposits of an asset        - gives  better risk segmentation forlenders"
      },
      "getCollateralRatio()": {
        "notice": "calculates the cratio"
      },
      "getCollateralValue()": {
        "notice": "calculates the collateral value in USD to 8 decimals"
      },
      "liquidate(uint256,address,address)": {
        "notice": "liquidates borrowers collateral by token and amount"
      },
      "releaseCollateral(uint256,address,address)": {
        "notice": "remove collateral from your position. Must remain above min collateral ratio"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9301,
        "contract": "contracts/modules/escrow/Escrow.sol:Escrow",
        "label": "minimumCollateralRatio",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9310,
        "contract": "contracts/modules/escrow/Escrow.sol:Escrow",
        "label": "loan",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9313,
        "contract": "contracts/modules/escrow/Escrow.sol:Escrow",
        "label": "_collateralTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9317,
        "contract": "contracts/modules/escrow/Escrow.sol:Escrow",
        "label": "enabled",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9322,
        "contract": "contracts/modules/escrow/Escrow.sol:Escrow",
        "label": "deposited",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Deposit)1694_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Deposit)1694_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IEscrow.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)1694_storage"
      },
      "t_struct(Deposit)1694_storage": {
        "encoding": "inplace",
        "label": "struct IEscrow.Deposit",
        "members": [
          {
            "astId": 1687,
            "contract": "contracts/modules/escrow/Escrow.sol:Escrow",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1689,
            "contract": "contracts/modules/escrow/Escrow.sol:Escrow",
            "label": "isERC4626",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1691,
            "contract": "contracts/modules/escrow/Escrow.sol:Escrow",
            "label": "asset",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1693,
            "contract": "contracts/modules/escrow/Escrow.sol:Escrow",
            "label": "assetDecimals",
            "offset": 21,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}